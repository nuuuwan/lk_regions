{"version":3,"sources":["base/BaseUtils.js","constants/ColorConstants.js","constants/Constants.js","base/GIG2.js","base/Ents.js","base/RegionGroup.js","stateful/molecules/GeoMap.js","stateful/atoms/RegionChip.js","nonstate/molecules/PartitionsTabContent.js","nonstate/molecules/DataTable.js","stateful/molecules/MainPanel.js","stateful/molecules/GroupSelector.js","base/GeoData.js","stateful/atoms/RegionView.js","nonstate/molecules/MultiRegionView.js","nonstate/molecules/ColorPanel.js","nonstate/molecules/MapPanel.js","stateful/pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["DataStructures","keyIDs","asyncFuncKeyToData","Promise","all","map","keyID","a","dataList","reduce","index","iKey","keyToValue","Object","entries","valueToKeys","key","value","push","Humanize","x","toPrecision","xSum","p","COLOR_SL_FLAG","FIELD_NAME_TO_COLOR","SLFP","PA","UPFA","SLPP","UNP","NDF","JVP","LSSP","ACTC","SLMP","other","others","bharatha","burgher","chetty","indian_tamil","tamil","malay","moor","muslim","sinhalese","sri_lankan_tamil","buddhist","islam","hindu","roman_catholic","other_christian","christian","female","male","son_or_daughter","head","wife_or_husband","grandchild_or_great_grand_child","other_relative","non_relative","son_or_daughter_in_law","parent_of_head_or_spouse","boarder","domestic_employee","clergy","tv","mobile","radio","fixed_tp","pc","laptop","fax","fire_wood","gas","kerosene","electricity","asbestos","tile","metal_sheet","concrete","zink_aluminium_sheet","cement","tile_or_granite_or_terrazo","mud","wood","occupants_burn","occupants_bury","collected_by_local_authorities","occupants_composting_solid_waste","tap_within_unit_main_line","tap_within_premises_but_outside_unit_main_line","tap_outside_premises_main_line","protected_well_within_premises","protected_well_outside_premises","unprotected_well","tube_well","rural_water_projects","river_or_tank_or_stream","bottled_water","single_house_single_floor","single_house_double_floor","single_house_more_than_2_floors","row_house_or_line_room","attached_house_or_annex","twin_house","flat","condominium","hut_or_shanty","owned_by_a_household_member","rent_or_lease_privately_owned","rent_or_lease_government_owned","occupied_free_of_rent","encroached","water_seal_and_connected_to_a_piped_sewer_system","water_seal_and_connected_to_a_septic_tank","pour_flush_toilet_not_water_seal","direct_pit","not_using_a_toilet","electricity_national_electricity_network","solar_power","bio_gas","housing_unit","collective_living_quarter","non_housing_unit","semi_permanent","permanent","improvised","unclassified","married_registered","never_married","widowed","married_customary","separated_not_legally","divorced","legally_separated","cement_block_or_stone","brick","cabook","soil_bricks","plank_or_metal_sheet","cadjan_or_palmyrah","occupied","vacant","APP_NAME","adhocValueKeyToColor","KEY_OTHER","MERGE_ALIAS_MAP","GIG2","tableName","url","WWW","tsv","getTable","table","valueKeys","getValueKeys","tableIndex","tableRow","cleanTableRow","includes","parseFloat","keys","filter","cellKey","maxValueKey","valueKey","minValueP","maxValueP","sumValue","getSumValues","valueP","Math","min","max","MathX","sum","sumValues","Color","getRandomHSLA","getMaxValueKey","getValueKeyColor","sortedValuePs","getValueKeyP","sort","nValues","length","valuePToRankP","iValue","values","firstRow","getFirstRow","totalRow","sortedNonOtherKeys","otherValueKeys","expandedTableRow","nonOtherKey","otherValueSum","mergedTableRow","mergedKey","mergedTableIndex","regionID","mergeKeysOnTableRow","mergeKeysOnTable","getTotalRow","valueSum","getValueSum","nonOtherValueKeys","b","expandedTableIndex","expandOtherOnTableRow","ENT","COUNTRY","PROVINCE","DISTRICT","DSD","GND","PD","ED","MOH","LG","UNKNOWN","REGION_TYPES","ENT_TYPE_TO_LONG_NAME","Country","PARENT_TO_CHILD","undefined","Ents","entID","substring","regionType","entType","getEntsByType","ents","entIndex","ent","id","entTypes","getEntIndexByType","entIndexList","allEntIndex","iEnt","getEntType","JSON","parse","json","parentType","parentID","childRegionType","StringX","toTitleCase","RegionGroup","regionEnts","groupList","regionEnt","groupID","name","groupIndex","group","regionIDs","regionToGroup","mapID","getEntTypeLongName","buildIndex","getGroupDataForRegionType","GeoMap","this","props","center","zoom","MapContainer","TileLayer","ZoomControl","position","children","Component","RegionChip","state","getEnt","setState","Chip","label","Typography","variant","sx","fontSize","toUpperCase","PartitionsTabContent","onClickGroup","activeGroupID","groupToRegion","invertDict","Box","iGroup","color","groupKey","onClick","Grid","container","direction","alignItems","item","paddingBottom","iRegion","regionKey","renderHeaderCell","TableCell","align","width","style","fontWeight","TableCellNumber","humanizedValue","number","humanizedPercent","percent","backgroundColor","opacity","styleText","borderRadius","padding","DataTable","activeTableIndex","activeMapColorTableName","filteredTableIndex","finalTableIndex","mergeAndExpandOtherOnTable","title","split","splice","join","component","TableContainer","top","bottom","Table","stickyHeader","TableHead","TableRow","TableBody","dataRow","TAB","DATA","MAP_QUALITY","REGIONS","DEFAULT_TAB","MainPanel","activeTab","event","newActiveTab","Paper","right","zIndex","TabContext","borderBottom","borderColor","TabList","onChange","onTabChange","bind","tab","Tab","TabPanel","showGroupSelector","onGroupSelectorHide","mapInfoIndex","onClickMap","Drawer","anchor","open","onClose","maxWidth","bgcolor","List","iMap","mapInfo","ListItem","disablePadding","e","ListItemButton","ListItemIcon","ListItemText","primary","isPointInPolygon","point","polygon","y","nIntersects","i","j","xi","yi","xj","yj","isPointInMultiMultiPolygon","multiMultiPolygon","multiPolygon","GeoData","getCoordinatesForRegion","geoDataList","regionToGeo","getRegionTree","regionTree","regionMap","iRegionType","isFoundRegion","isPointInRegion","RegionView","geoJSON","isComponentMounted","geoData","type","coordinates","onClickRegion","GeoJSON","data","onEachFeature","feature","layer","on","click","originalEvent","altKey","MultiRegionView","funcGetRegionStyle","COLOR_INFO_LIST","Icon","PeopleAltIcon","BallotIcon","ColorPanel","onClickMapColor","left","height","dense","subheader","ListSubheader","selected","REGION_TYPE_LIST","MapPanel","activeMapID","DEFAULT_LATLNG","DEFAULT_MAP_ID","TABLE_NAMES","d","DEFAULT_TABLE_NAME","getTableIndexIndex","getTableIndex","HomePage","tableIndexIndex","updateMap","getMapInfoIndex","getChildType","getChildIDs","childRegionIDs","regionGroup","childRegionID","expandRegion","regionRow","console","debug","getTableRowColor","fillColor","fillOpacity","weight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0406133a.chunk.js","sourcesContent":["export class DataStructures {\n  static async buildIndex(keyIDs, asyncFuncKeyToData) {\n    const dataList = await Promise.all(\n      keyIDs.map(async function (keyID) {\n        return await asyncFuncKeyToData(keyID);\n      })\n    );\n\n    return keyIDs.reduce(function (index, keyID, iKey) {\n      index[keyID] = dataList[iKey];\n      return index;\n    }, {});\n  }\n\n  static invertDict(keyToValue) {\n    return Object.entries(keyToValue).reduce(function (\n      valueToKeys,\n      [key, value]\n    ) {\n      if (value) {\n        if (!valueToKeys[value]) {\n          valueToKeys[value] = [];\n        }\n        valueToKeys[value].push(key);\n      }\n      return valueToKeys;\n    },\n    {});\n  }\n}\n\nconst DEFAULT_PRECISION = 3;\n\nexport class Humanize {\n  static number(x) {\n    if (x > 1_000_000) {\n      return (x / 1_000_000).toPrecision(DEFAULT_PRECISION) + \"M\";\n    }\n    if (x > 1_000) {\n      return (x / 1_000).toPrecision(DEFAULT_PRECISION) + \"K\";\n    }\n    return x;\n  }\n\n  static percent(x, xSum) {\n    if (!xSum) {\n      return \"-\";\n    }\n    const p = x / xSum;\n    if (p < 0.01) {\n      return \"<1%\";\n    }\n    return (p * 100.0).toPrecision(DEFAULT_PRECISION) + \"%\";\n  }\n}\n","export const COLOR_ACTIVE = \"red\";\nexport const COLOR_NOT_ACTIVE = \"white\";\n\nexport const COLOR_SL_FLAG = {\n  SINHALA: \"hsl(355, 63%, 34%)\",\n  TAMIL: \"hsl(21, 100%, 50%)\",\n  MOOR: \"hsl(165, 100%, 17%)\",\n  BUDDHIST: \"hsl(43, 100%, 50%)\",\n};\nexport const FIELD_NAME_TO_COLOR = {\n  // political parties\n  SLFP: \"blue\",\n  PA: \"blue\",\n  UPFA: \"blue\",\n  SLPP: COLOR_SL_FLAG.SINHALA,\n  UNP: \"green\",\n  NDF: \"green\",\n  JVP: \"red\",\n  LSSP: \"red\",\n  ACTC: COLOR_SL_FLAG.TAMIL,\n  SLMP: \"purple\",\n\n  other: \"ghostwhite\",\n  others: \"gray\",\n  // ethnicity_of_population\n  bharatha: \"cyan\",\n  burgher: \"purple\",\n  chetty: \"blue\",\n  indian_tamil: COLOR_SL_FLAG.TAMIL,\n  tamil: COLOR_SL_FLAG.TAMIL,\n  malay: COLOR_SL_FLAG.MOOR,\n  moor: COLOR_SL_FLAG.MOOR,\n  muslim: COLOR_SL_FLAG.MOOR,\n  sinhalese: COLOR_SL_FLAG.SINHALA,\n  sri_lankan_tamil: COLOR_SL_FLAG.TAMIL,\n  // religious_affiliation_of_population\n  buddhist: COLOR_SL_FLAG.BUDDHIST,\n  islam: COLOR_SL_FLAG.MOOR,\n  hindu: COLOR_SL_FLAG.TAMIL,\n  roman_catholic: \"purple\",\n  other_christian: \"blue\",\n  christian: \"purple\",\n  // gender_of_population\n  female: \"pink\",\n  male: \"lightblue\",\n  // age_group_of_population\n  // relationship_to_household_head_of_population\n  son_or_daughter: \"green\",\n  head: \"blue\",\n  wife_or_husband: \"pink\",\n  grandchild_or_great_grand_child: \"darkgreen\",\n  other_relative: \"yellow\",\n  non_relative: \"silver\",\n  son_or_daughter_in_law: \"lightgreen\",\n  parent_of_head_or_spouse: \"red\",\n  boarder: \"gray\",\n  domestic_employee: \"brown\",\n  clergy: \"yellow\", //\n  // communication_items_owned_by_household\n  tv: \"green\",\n  mobile: \"purple\",\n  radio: \"maroon\",\n  fixed_tp: \"blue\",\n  pc: \"red\",\n  laptop: \"pink\",\n  fax: \"silver\",\n  // cooking_fuel_of_household\n  fire_wood: \"brown\",\n  gas: \"orange\",\n  kerosene: \"purple\",\n  electricity: \"blue\",\n  // roof_type_in_housing_unit\n\n  // rooms_in_housing_unit\n  // floor_type_in_housing_unit\n  asbestos: \"gray\",\n  tile: \"darkred\",\n  metal_sheet: \"silver\",\n  concrete: \"green\",\n  zink_aluminium_sheet: \"blue\",\n  cement: \"lightgray\",\n  tile_or_granite_or_terrazo: \"orange\",\n  mud: \"darkbrown\",\n  wood: \"brown\",\n  // solid_waste_disposal_by_household\n  occupants_burn: \"red\",\n  occupants_bury: \"orange\",\n  collected_by_local_authorities: \"blue\",\n  occupants_composting_solid_waste: \"green\",\n  // source_of_drinking_water_of_household\n  tap_within_unit_main_line: \"darkgreen\",\n  tap_within_premises_but_outside_unit_main_line: \"green\",\n  tap_outside_premises_main_line: \"orange\",\n  protected_well_within_premises: \"blue\",\n  protected_well_outside_premises: \"lightblue\",\n  unprotected_well: \"purple\",\n  tube_well: \"cyan\",\n  rural_water_projects: \"pink\",\n  river_or_tank_or_stream: \"red\", //\n  bottled_water: \"silver\",\n  // structure_of_housing_units\n  single_house_single_floor: \"darkgreen\",\n  single_house_double_floor: \"green\",\n  single_house_more_than_2_floors: \"lightgreen\",\n  row_house_or_line_room: \"orange\",\n  attached_house_or_annex: \"silver\",\n  twin_house: \"cyan\",\n  flat: \"blue\",\n  condominium: \"purple\",\n  hut_or_shanty: \"red\",\n\n  // housing_ownership_status_of_household\n  owned_by_a_household_member: \"green\",\n  rent_or_lease_privately_owned: \"blue\",\n  rent_or_lease_government_owned: \"cyan\",\n  occupied_free_of_rent: \"orange\",\n  encroached: \"red\",\n  // toilet_facilities_of_household\n  water_seal_and_connected_to_a_piped_sewer_system: \"green\",\n  water_seal_and_connected_to_a_septic_tank: \"lightgreen\",\n  pour_flush_toilet_not_water_seal: \"orange\",\n  direct_pit: \"red\",\n  not_using_a_toilet: \"black\",\n  // lighting_of_household\n  electricity_national_electricity_network: \"blue\",\n  solar_power: \"yellow\",\n  bio_gas: \"orange\",\n  // living_quarters\n  housing_unit: \"green\",\n  collective_living_quarter: \"orange\",\n  non_housing_unit: \"red\",\n  // type_of_housing_unit\n  semi_permanent: \"orange\",\n  permanent: \"green\",\n  improvised: \"red\",\n  unclassified: \"black\",\n  // marital_status_of_population\n  married_registered: \"blue\",\n  never_married: \"green\",\n  widowed: \"orange\",\n  married_customary: \"lightblue\",\n  separated_not_legally: \"pink\",\n  divorced: \"red\",\n  legally_separated: \"maroon\",\n  // wall_type_in_housing_units\n  cement_block_or_stone: \"darkgray\",\n  brick: \"maroon\",\n  cabook: \"orange\",\n  soil_bricks: \"green\",\n  plank_or_metal_sheet: \"silver\",\n  // occupation_status_of_housing_units\n  cadjan_or_palmyrah: \"orange\",\n  occupied: \"green\",\n  vacant: \"red\",\n  // year_of_construction_of_housing_unit\n  // persons_living_in_housing_unit\n};\n","export const APP_NAME = \"lk_regions\";\n","import { MathX, Color, WWW } from \"@nuuuwan/utils-js-dev\";\nimport { FIELD_NAME_TO_COLOR } from \"../constants/ColorConstants.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\nlet adhocValueKeyToColor = {};\n\nconst ID_FIELD_KEY = \"entity_id\";\nconst OTHER_LIMIT = 0.01;\nconst KEY_OTHER = \"other\";\nconst MERGE_ALIAS_MAP = {\n  moor: \"muslim\",\n  malay: \"muslim\",\n  sri_lankan_tamil: \"tamil\",\n  indian_tamil: \"tamil\",\n  roman_catholic: \"christian\",\n  other_christian: \"christian\",\n};\n\nexport default class GIG2 {\n  static async getTable(tableName) {\n    const url = `/${APP_NAME}/data/gig2/${tableName}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getTableIndex(tableName) {\n    const table = await GIG2.getTable(tableName);\n    const valueKeys = GIG2.getValueKeys(table[0]);\n    return table.reduce(function (tableIndex, tableRow) {\n      tableIndex[tableRow[ID_FIELD_KEY]] = Object.entries(tableRow).reduce(\n        function (cleanTableRow, [key, value]) {\n          if (valueKeys.includes(key)) {\n            value = parseFloat(value);\n          }\n          cleanTableRow[key] = value;\n          return cleanTableRow;\n        },\n        {}\n      );\n      return tableIndex;\n    }, {});\n  }\n\n  static getValueKeys(tableRow) {\n    const valueCellKeys = Object.keys(tableRow).filter(\n      (cellKey) =>\n        !(\n          cellKey.includes(\"total_\") ||\n          cellKey.includes(\"_id\") ||\n          cellKey.includes(\"result_ut\") ||\n          cellKey.includes(\"valid\") ||\n          cellKey.includes(\"rejected\") ||\n          cellKey.includes(\"polled\") ||\n          cellKey.includes(\"electors\")\n        )\n    );\n    return valueCellKeys;\n  }\n\n  static getMaxValueKey(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    const maxValueKey = valueKeys.reduce(function (maxValueKey, valueKey) {\n      if (tableRow[maxValueKey] < tableRow[valueKey]) {\n        maxValueKey = valueKey;\n      }\n      return maxValueKey;\n    }, valueKeys[0]);\n    return maxValueKey;\n  }\n\n  static getMinMaxValueP(dataList, valueKey) {\n    return dataList.reduce(\n      function ([minValueP, maxValueP], tableRow) {\n        const sumValue = GIG2.getSumValues(tableRow);\n        const value = tableRow[valueKey];\n        const valueP = value / sumValue;\n        return [Math.min(minValueP, valueP), Math.max(maxValueP, valueP)];\n      },\n      [1.0, 0.0]\n    );\n  }\n\n  static getSumValues(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    return MathX.sum(valueKeys.map((valueKey) => tableRow[valueKey]));\n  }\n\n  static getValueKeyP(tableRow, valueKey) {\n    const sumValues = GIG2.getSumValues(tableRow);\n    return tableRow[valueKey] / sumValues;\n  }\n\n  static getValueKeyColor(valueKey) {\n    if (FIELD_NAME_TO_COLOR[valueKey]) {\n      return FIELD_NAME_TO_COLOR[valueKey];\n    }\n    if (!adhocValueKeyToColor[valueKey]) {\n      adhocValueKeyToColor[valueKey] = Color.getRandomHSLA();\n    }\n    return adhocValueKeyToColor[valueKey];\n  }\n\n  static getTableRowColor(tableRow) {\n    const maxValueKey = GIG2.getMaxValueKey(tableRow);\n    return GIG2.getValueKeyColor(maxValueKey);\n  }\n\n  static getValuePToRankP(dataList, valueKey) {\n    const sortedValuePs = dataList\n      .map((tableRow) => GIG2.getValueKeyP(tableRow, valueKey))\n      .sort();\n    const nValues = sortedValuePs.length;\n    return sortedValuePs.reduce(function (valuePToRankP, valueP, iValue) {\n      valuePToRankP[valueP] = iValue / nValues;\n      return valuePToRankP;\n    }, {});\n  }\n\n  static getFirstRow(tableIndex) {\n    return Object.values(tableIndex)[0];\n  }\n\n  static getTotalRow(tableIndex) {\n    const firstRow = GIG2.getFirstRow(tableIndex);\n    const valueKeys = GIG2.getValueKeys(firstRow);\n    return valueKeys.reduce(function (totalRow, key) {\n      totalRow[key] = MathX.sum(\n        Object.values(tableIndex).map((tableRow) => tableRow[key])\n      );\n      return totalRow;\n    }, {});\n  }\n\n  static getValueSum(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    return MathX.sum(valueKeys.map((valueKey) => tableRow[valueKey]));\n  }\n\n  static expandOtherOnTableRow(tableRow, sortedNonOtherKeys, otherValueKeys) {\n    let expandedTableRow = sortedNonOtherKeys.reduce(function (\n      expandedTableRow,\n      nonOtherKey\n    ) {\n      expandedTableRow[nonOtherKey] = tableRow[nonOtherKey];\n      return expandedTableRow;\n    },\n    {});\n\n    const otherValueSum = MathX.sum(\n      otherValueKeys.map((valueKey) => tableRow[valueKey])\n    );\n    expandedTableRow[KEY_OTHER] = otherValueSum;\n\n    return expandedTableRow;\n  }\n\n  static mergeKeysOnTableRow(tableRow) {\n    return Object.entries(tableRow).reduce(function (\n      mergedTableRow,\n      [key, value]\n    ) {\n      const mergedKey = MERGE_ALIAS_MAP[key] ? MERGE_ALIAS_MAP[key] : key;\n      if (!mergedTableRow[mergedKey]) {\n        mergedTableRow[mergedKey] = 0;\n      }\n      mergedTableRow[mergedKey] += value;\n      return mergedTableRow;\n    },\n    {});\n  }\n\n  static mergeKeysOnTable(tableIndex) {\n    return Object.entries(tableIndex).reduce(function (\n      mergedTableIndex,\n      [regionID, tableRow]\n    ) {\n      mergedTableIndex[regionID] = GIG2.mergeKeysOnTableRow(tableRow);\n      return mergedTableIndex;\n    },\n    {});\n  }\n\n  static mergeAndExpandOtherOnTable(tableIndex) {\n    const mergedTableIndex = GIG2.mergeKeysOnTable(tableIndex);\n\n    const totalRow = GIG2.getTotalRow(mergedTableIndex);\n    const valueKeys = GIG2.getValueKeys(totalRow);\n    const valueSum = GIG2.getValueSum(totalRow);\n\n    const [otherValueKeys, nonOtherValueKeys] = valueKeys.reduce(\n      function ([otherValueKeys, nonOtherValueKeys], valueKey) {\n        if (valueKey === KEY_OTHER) {\n          otherValueKeys.push(valueKey);\n        }\n        if (totalRow[valueKey] / valueSum < OTHER_LIMIT) {\n          otherValueKeys.push(valueKey);\n        } else {\n          nonOtherValueKeys.push(valueKey);\n        }\n        return [otherValueKeys, nonOtherValueKeys];\n      },\n      [[], []]\n    );\n\n    const sortedNonOtherKeys = nonOtherValueKeys\n      .map(function (key) {\n        return { key, value: totalRow[key] };\n      })\n      .sort((a, b) => b.value - a.value)\n      .map((x) => x.key);\n\n    const expandedTableIndex = Object.entries(mergedTableIndex).reduce(\n      function (expandedTableIndex, [regionID, tableRow]) {\n        expandedTableIndex[regionID] = GIG2.expandOtherOnTableRow(\n          tableRow,\n          sortedNonOtherKeys,\n          otherValueKeys\n        );\n        return expandedTableIndex;\n      },\n      {}\n    );\n    return expandedTableIndex;\n  }\n}\n","import { WWW, StringX } from \"@nuuuwan/utils-js-dev\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const REGION_ID_LK = \"LK\";\nexport const ENT = {\n  COUNTRY: \"country\",\n  PROVINCE: \"province\",\n  DISTRICT: \"district\",\n  DSD: \"dsd\",\n  GND: \"gnd\",\n  PD: \"pd\",\n  ED: \"ed\",\n  MOH: \"moh\",\n  LG: \"lg\",\n  UNKNOWN: \"unknown-entity\",\n};\n\nexport const REGION_TYPES = Object.values(ENT);\n\nexport const ENT_TYPE_TO_LONG_NAME = {\n  [ENT.Country]: \"Country\",\n  [ENT.PROVINCE]: \"Province\",\n  [ENT.DISTRICT]: \"District\",\n  [ENT.DSD]: \"Divisional Secretariat Division\",\n  [ENT.GND]: \"Grama Niladhari Division\",\n  [ENT.PD]: \"Polling Division\",\n  [ENT.ED]: \"Electoral District\",\n  [ENT.MOH]: \"Medical Officer of Health Area\",\n  [ENT.LG]: \"Local Authority Area\",\n};\n\nexport const PARENT_TO_CHILD = {\n  [ENT.COUNTRY]: ENT.PROVINCE,\n  [ENT.PROVINCE]: ENT.DISTRICT,\n  [ENT.DISTRICT]: ENT.DSD,\n  [ENT.DSD]: ENT.GND,\n  [ENT.GND]: undefined,\n  [ENT.PD]: undefined,\n  [ENT.ED]: [ENT.PD],\n};\n\nexport default class Ents {\n  static getEntType(entID) {\n    if (entID.substring(0, 2) === \"LK\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 2:\n          return ENT.COUNTRY;\n        case 4:\n          return ENT.PROVINCE;\n        case 5:\n          return ENT.DISTRICT;\n        case 7:\n          return ENT.DSD;\n        case 10:\n          return ENT.GND;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n    if (entID.substring(0, 2) === \"EC\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 5:\n          return ENT.ED;\n        case 6:\n          return ENT.PD;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n\n    if (entID.substring(0, 2) === \"LG\") {\n      return ENT.LG;\n    }\n\n    if (entID.substring(0, 3) === \"MOH\") {\n      return ENT.MOH;\n    }\n    return ENT.UNKNOWN;\n  }\n  static getRegionName(regionType) {\n    return ENT_TYPE_TO_LONG_NAME[regionType];\n  }\n  static async getEntsByType(entType) {\n    const url = `/${APP_NAME}/data/ents/${entType}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getEntIndexByType(entType) {\n    const ents = await Ents.getEntsByType(entType);\n    return ents.reduce(function (entIndex, ent) {\n      entIndex[ent.id] = ent;\n      return entIndex;\n    }, {});\n  }\n\n  static async getAllEntIndex() {\n    const entTypes = REGION_TYPES;\n    const entIndexList = await Promise.all(\n      entTypes.map(async function (entType) {\n        return await Ents.getEntIndexByType(entType);\n      })\n    );\n\n    return entTypes.reduce(function (allEntIndex, entType, iEnt) {\n      allEntIndex[entType] = entIndexList[iEnt];\n      return allEntIndex;\n    }, {});\n  }\n\n  static async getEnt(entID) {\n    const entType = Ents.getEntType(entID);\n    const entIndex = await Ents.getEntIndexByType(entType);\n    let ent = entIndex[entID];\n    if (ent[\"centroid\"]) {\n      ent[\"centroid\"] = JSON.parse(ent[\"centroid\"]);\n    }\n    return ent;\n  }\n\n  static async getParentToChildMap() {\n    const url = `data/ents/parent_to_child_map.json`;\n    return await WWW.json(url);\n  }\n\n  static getChildType(parentType) {\n    return PARENT_TO_CHILD[parentType];\n  }\n\n  static async getChildIDs(parentID, childRegionType) {\n    const ents = await Ents.getEntsByType(childRegionType);\n    return ents\n      .map((ent) => ent.id)\n      .filter((entID) => entID.includes(parentID) || parentID === \"LK\");\n  }\n\n  static getEntTypeLongName(entType) {\n    return ENT_TYPE_TO_LONG_NAME[entType]\n      ? ENT_TYPE_TO_LONG_NAME[entType]\n      : StringX.toTitleCase(entType);\n  }\n}\n","import Ents, { ENT } from \"./Ents.js\";\nimport { DataStructures } from \"./BaseUtils.js\";\n\nexport default class RegionGroup {\n  static async getGroupDataForRegionType(regionType) {\n    const regionEnts = await Ents.getEntsByType(regionType);\n    const groupList = regionEnts.map(function (regionEnt) {\n      return {\n        groupID: regionEnt.id,\n        name: regionEnt.name,\n      };\n    });\n\n    const groupIndex = groupList.reduce(function (groupIndex, group) {\n      groupIndex[group.groupID] = group;\n      return groupIndex;\n    }, {});\n\n    const regionIDs = regionEnts\n      .map((regionEnt) => regionEnt.id)\n      .filter(function (regionID) {\n        return regionType !== ENT.PD || regionID.substring(5) !== \"P\";\n      });\n\n    const regionToGroup = regionIDs.reduce(function (regionToGroup, regionID) {\n      regionToGroup[regionID] = regionID;\n      return regionToGroup;\n    }, {});\n\n    return {\n      mapID: \"by_\" + regionType,\n      name: \"By \" + Ents.getEntTypeLongName(regionType),\n      groupIndex,\n      regionToGroup,\n    };\n  }\n\n  static async getMapInfoIndex() {\n    return await DataStructures.buildIndex(\n      [ENT.PROVINCE, ENT.DISTRICT, ENT.DSD, ENT.ED, ENT.PD],\n      RegionGroup.getGroupDataForRegionType\n    );\n  }\n}\n","import { Component } from \"react\";\nimport { MapContainer, TileLayer, ZoomControl } from \"react-leaflet\";\n\nimport \"./GeoMap.css\";\n\nconst URL_FORMAT = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\nexport default class GeoMap extends Component {\n  render() {\n    const { center, zoom } = this.props;\n    return (\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer url={URL_FORMAT} />\n        <ZoomControl zoom={zoom} position=\"bottomright\" />\n        {this.props.children}\n      </MapContainer>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Ents from \"../../base/Ents.js\";\n\nexport default class RegionChip extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { regionEnt: undefined };\n  }\n  async componentDidMount() {\n    const regionEnt = await Ents.getEnt(this.props.regionID);\n    this.setState({ regionEnt });\n  }\n  render() {\n    const { regionEnt } = this.state;\n    const { regionID } = this.props;\n    if (!regionEnt) {\n      return <Chip label={regionID} />;\n    }\n    const regionType = Ents.getEntType(regionID);\n    return (\n      <Chip\n        label={\n          <>\n            <Typography variant=\"body2\" sx={{ fontSize: 9 }}>\n              {regionEnt.name + \" \" + regionType.toUpperCase()}\n            </Typography>\n          </>\n        }\n      />\n    );\n  }\n}\n","import Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport RegionChip from \"../../stateful/atoms/RegionChip.js\";\n\nimport {\n  COLOR_ACTIVE,\n  COLOR_NOT_ACTIVE,\n} from \"../../constants/ColorConstants.js\";\n\nexport default function PartitionsTabContent(props) {\n  const { groupIndex, regionToGroup, onClickGroup, activeGroupID } = props;\n\n  const groupToRegion = DataStructures.invertDict(regionToGroup);\n\n  return (\n    <Box>\n      {Object.entries(groupIndex).map(function ([groupID, group], iGroup) {\n        let regionIDs = groupToRegion[groupID];\n        if (!regionIDs) {\n          regionIDs = [];\n        }\n        function onClickGroupInner() {\n          onClickGroup(groupID);\n        }\n\n        const color =\n          activeGroupID === groupID ? COLOR_ACTIVE : COLOR_NOT_ACTIVE;\n\n        const groupKey = `group-${groupID}`;\n        return (\n          <Box key={groupKey} onClick={onClickGroupInner}>\n            <Grid container direction=\"row\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"overline\">{group.name}</Typography>\n              </Grid>\n              <Grid item>\n                <CircleIcon sx={{ color }} fontSize=\"smallest\" />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ paddingBottom: 2 }}>\n              {regionIDs.map(function (regionID, iRegion) {\n                const regionKey = `region-${regionID}`;\n                return <RegionChip key={regionKey} regionID={regionID} />;\n              })}\n            </Box>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { StringX } from \"@nuuuwan/utils-js-dev\";\nimport { Humanize } from \"../../base/BaseUtils.js\";\nimport GIG2 from \"../../base/GIG2.js\";\nimport RegionChip from \"../../stateful/atoms/RegionChip.js\";\n\nfunction renderHeaderCell(valueKey) {\n  const style = { fontWeight: 800 };\n  return (\n    <TableCell\n      key={\"header-\" + valueKey}\n      align=\"right\"\n      width=\"30\"\n      style={style}\n    >\n      {StringX.toTitleCase(valueKey)}\n    </TableCell>\n  );\n}\n\nfunction TableCellNumber(props) {\n  const { value, valueSum, valueKey } = props;\n  const humanizedValue = Humanize.number(value);\n  const humanizedPercent = Humanize.percent(value, valueSum);\n  const p = value / valueSum;\n\n  let backgroundColor = \"white\";\n  let color = \"black\";\n  if (p > 0.5) {\n    backgroundColor = GIG2.getValueKeyColor(valueKey);\n    color = \"white\";\n  }\n\n  let opacity = 0.2;\n  if (p > 0.5) {\n    opacity = p;\n  } else if (p > 0.1) {\n    opacity = 0.5;\n  } else if (p > 0.01) {\n    opacity = 0.4;\n  }\n\n  const styleText = {\n    backgroundColor,\n    opacity,\n    borderRadius: 3,\n    padding: 3,\n  };\n\n  return (\n    <TableCell align=\"right\">\n      <div style={styleText}>\n        <div style={{ fontSize: 15, color }}>{humanizedPercent}</div>\n        <div style={{ fontSize: 9, color }}>{humanizedValue}</div>\n      </div>\n    </TableCell>\n  );\n}\n\nexport default function DataTable(props) {\n  const { regionToGroup, activeTableIndex, activeMapColorTableName } = props;\n  const filteredTableIndex = Object.entries(activeTableIndex).reduce(function (\n    filteredTableIndex,\n    [regionID, tableRow]\n  ) {\n    if (regionToGroup[regionID]) {\n      filteredTableIndex[regionID] = tableRow;\n    }\n    return filteredTableIndex;\n  },\n  {});\n  const finalTableIndex = GIG2.mergeAndExpandOtherOnTable(filteredTableIndex);\n  const valueKeys = GIG2.getValueKeys(GIG2.getFirstRow(finalTableIndex));\n\n  const title = StringX.toTitleCase(\n    activeMapColorTableName.split(\".\").splice(1, 3).join(\" - \")\n  );\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle1\" component=\"div\">\n        {title}\n      </Typography>\n      <TableContainer\n        sx={{ position: \"absolute\", top: 100, bottom: 20, width: 560 }}\n      >\n        <Table stickyHeader padding=\"none\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"right\" width=\"80\" />\n              {valueKeys.map(renderHeaderCell)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.entries(finalTableIndex).map(function ([\n              regionID,\n              dataRow,\n            ]) {\n              const valueSum = GIG2.getValueSum(dataRow);\n              return (\n                <TableRow key={regionID}>\n                  <TableCell>\n                    <RegionChip regionID={regionID} />\n                  </TableCell>\n                  {valueKeys.map(function (valueKey) {\n                    return (\n                      <TableCellNumber\n                        key={regionID + \"-\" + valueKey}\n                        value={dataRow[valueKey]}\n                        valueSum={valueSum}\n                        valueKey={valueKey}\n                      />\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Tab from \"@mui/material/Tab\";\nimport TabContext from \"@mui/lab/TabContext\";\nimport TabList from \"@mui/lab/TabList\";\nimport TabPanel from \"@mui/lab/TabPanel\";\n\nimport PartitionsTabContent from \"../../nonstate/molecules/PartitionsTabContent.js\";\nimport DataTable from \"../../nonstate/molecules/DataTable.js\";\n\nconst TAB = {\n  DATA: \"Data\",\n  MAP_QUALITY: \"Map Quality\",\n  REGIONS: \"Regions\",\n};\nconst DEFAULT_TAB = TAB.DATA;\n\nexport default class MainPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { activeTab: DEFAULT_TAB };\n  }\n\n  onTabChange(event, newActiveTab) {\n    this.setState({ activeTab: newActiveTab });\n  }\n\n  render() {\n    const {\n      groupIndex,\n      regionToGroup,\n      onClickGroup,\n      activeGroupID,\n      activeTableIndex,\n      activeMapColorTableName,\n    } = this.props;\n    const { activeTab } = this.state;\n\n    return (\n      <Paper\n        sx={{\n          position: \"absolute\",\n          top: 20,\n          right: 20,\n          bottom: 20,\n          width: 600,\n          zIndex: 1000,\n        }}\n      >\n        <TabContext value={activeTab}>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <TabList\n              onChange={this.onTabChange.bind(this)}\n              aria-label=\"lab API tabs example\"\n            >\n              {[TAB.DATA, TAB.MAP_QUALITY, TAB.REGIONS].map(function (tab) {\n                return <Tab key={tab} label={tab} value={tab} />;\n              })}\n            </TabList>\n          </Box>\n\n          <TabPanel value={TAB.DATA}>\n            <DataTable\n              regionToGroup={regionToGroup}\n              activeTableIndex={activeTableIndex}\n              activeMapColorTableName={activeMapColorTableName}\n            />\n          </TabPanel>\n          <TabPanel value={TAB.MAP_QUALITY}>TODO</TabPanel>\n          <TabPanel value={TAB.REGIONS}>\n            <PartitionsTabContent\n              groupIndex={groupIndex}\n              regionToGroup={regionToGroup}\n              onClickGroup={onClickGroup}\n              activeGroupID={activeGroupID}\n            />\n          </TabPanel>\n        </TabContext>\n      </Paper>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MapIcon from \"@mui/icons-material/Map\";\n\nexport default class MainPanel extends Component {\n  render() {\n    const { showGroupSelector, onGroupSelectorHide, mapInfoIndex, onClickMap } =\n      this.props;\n\n    return (\n      <Drawer\n        anchor={\"right\"}\n        open={showGroupSelector}\n        onClose={onGroupSelectorHide}\n        sx={{ width: 400 }}\n      >\n        <Paper\n          sx={{\n            width: 400,\n          }}\n        >\n          <Box\n            sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}\n          >\n            <List>\n              {Object.entries(mapInfoIndex).map(function (\n                [mapID, mapInfo],\n                iMap\n              ) {\n                const key = `map-info-${iMap}`;\n                const onClickMapInner = function (e) {\n                  onClickMap(mapID);\n                };\n                return (\n                  <ListItem key={key} disablePadding onClick={onClickMapInner}>\n                    <ListItemButton>\n                      <ListItemIcon>\n                        <MapIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={mapInfo.name} />\n                    </ListItemButton>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Box>\n        </Paper>\n      </Drawer>\n    );\n  }\n}\n","import { WWW } from \"@nuuuwan/utils-js-dev\";\nimport Ents, { REGION_TYPES } from \"./Ents.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const DEFAULT_ZOOM = 8;\nexport const DEFAULT_LATLNG = [7.836173, 80.403442];\n\nexport function getDefaultLatLngZoomStr() {\n  return getLatLngZoomStr(DEFAULT_LATLNG, DEFAULT_ZOOM);\n}\n\nexport function getLatLngZoomStr([lat, lng], zoom) {\n  return `${lat}N,${lng}E,${zoom}z`;\n}\n\nexport function parseLatLngZoomStr(locationStr) {\n  const [latStr, lngStr, zoomStr] = locationStr.split(\",\");\n  const lat = parseFloat(latStr.replace(\"N\", \"\"));\n  const lng = parseFloat(lngStr.replace(\"E\", \"\"));\n  const zoom = parseInt(zoomStr.replace(\"z\", \"\"));\n  return { lat, lng, zoom };\n}\n\nexport function getBrowserLatLng(callback) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      callback([position.coords.latitude, position.coords.longitude]);\n    });\n  } else {\n    callback(DEFAULT_LATLNG);\n  }\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [y, x] = point;\n  let nIntersects = 0;\n  for (let i in polygon) {\n    const j = (i - 1 + polygon.length) % polygon.length;\n\n    const [xi, yi] = polygon[i];\n    const [xj, yj] = polygon[j];\n\n    // eslint-disable-next-line no-mixed-operators\n    const a = yi > y !== yj > y;\n    // eslint-disable-next-line no-mixed-operators\n    const b = x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n    const intersect = a && b;\n    if (intersect) {\n      nIntersects += 1;\n    }\n  }\n  return nIntersects % 2 === 1;\n}\n\nfunction isPointInMultiMultiPolygon(point, multiMultiPolygon) {\n  for (let i in multiMultiPolygon) {\n    const multiPolygon = multiMultiPolygon[i];\n    for (let j in multiPolygon) {\n      const polygon = multiPolygon[j];\n      if (isPointInPolygon(point, polygon)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport default class GeoData {\n  static async getCoordinatesForRegion(regionID) {\n    const regionType = Ents.getEntType(regionID);\n    const url = `/${APP_NAME}/data/geo/${regionType}/${regionID}.json`;\n    return await WWW.json(url);\n  }\n\n  static async getRegionToGeo(regionIDs) {\n    const geoDataList = await Promise.all(\n      regionIDs.map(async function (regionID) {\n        return await GeoData.getCoordinatesForRegion(regionID);\n      })\n    );\n\n    return regionIDs.reduce(function (regionToGeo, regionID, iRegion) {\n      regionToGeo[regionID] = geoDataList[iRegion];\n      return regionToGeo;\n    }, {});\n  }\n\n  static async getRegionTree() {\n    const url = `/${APP_NAME}/data/geo/region_tree.json`;\n    return await WWW.json(url);\n  }\n\n  static async isPointInRegion(point, regionID) {\n    const multiPolygon = await GeoData.getCoordinatesForRegion(regionID);\n    return isPointInMultiMultiPolygon(point, multiPolygon);\n  }\n\n  static async getRegionsForPoint(point) {\n    let regionTree = await GeoData.getRegionTree();\n\n    let regionMap = {};\n\n    for (let iRegionType in REGION_TYPES) {\n      const regionType = REGION_TYPES[iRegionType];\n      const regionIDs = Object.keys(regionTree);\n      let isFoundRegion = false;\n      for (let iRegion in regionIDs) {\n        const regionID = regionIDs[iRegion];\n        const _isPointInRegion = await GeoData.isPointInRegion(point, regionID);\n        if (_isPointInRegion) {\n          regionMap[regionType] = regionID;\n          regionTree = regionTree[regionID];\n          isFoundRegion = true;\n        }\n      }\n      if (!isFoundRegion) {\n        break;\n      }\n    }\n    return regionMap;\n  }\n}\n\nexport function roundLatLng(latLng) {\n  const Q = 1000_000;\n  return latLng.map((x) => Math.round(parseFloat(x) * Q) / Q);\n}\n","import { Component } from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\nimport GeoData from \"../../base/GeoData.js\";\n\nexport default class RegionView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { geoJSON: null };\n    this.isComponentMounted = false;\n  }\n\n  async componentDidMount() {\n    this.isComponentMounted = true;\n    const { regionID } = this.props;\n    const geoData = await GeoData.getCoordinatesForRegion(regionID);\n    const geoJSON = {\n      type: \"MultiPolygon\",\n      coordinates: geoData,\n    };\n    if (this.isComponentMounted) {\n      this.setState({ geoJSON });\n    }\n  }\n\n  compoentnDidUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    const { geoJSON } = this.state;\n    if (geoJSON === null) {\n      return null;\n    }\n\n    const { regionID, style, onClickRegion } = this.props;\n\n    const onEachFeature = (feature, layer) => {\n      layer.on({\n        click: function (e) {\n          onClickRegion(regionID, e.originalEvent.altKey);\n        },\n      });\n    };\n\n    return (\n      <GeoJSON\n        key={`geo-json-${regionID}`}\n        data={geoJSON}\n        style={style}\n        onEachFeature={onEachFeature}\n      />\n    );\n  }\n}\n","import RegionView from \"../../stateful/atoms/RegionView.js\";\n\nexport default function MultiRegionView(props) {\n  const { regionToGroup, onClickRegion, funcGetRegionStyle } = props;\n\n  return Object.entries(regionToGroup).map(function (\n    [regionID, groupID],\n    iRegion\n  ) {\n    const key = `region-${regionID}`;\n    return (\n      <RegionView\n        key={key}\n        regionID={regionID}\n        onClickRegion={onClickRegion}\n        style={funcGetRegionStyle(regionID)}\n      />\n    );\n  });\n}\n","import Paper from \"@mui/material/Paper\";\n\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport List from \"@mui/material/List\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport BallotIcon from \"@mui/icons-material/Ballot\";\n\nexport const COLOR_INFO_LIST = [\n  {\n    label: \"Ethnicity\",\n    tableName: \"regions.2012_census.ethnicity_of_population\",\n    Icon: PeopleAltIcon,\n  },\n  {\n    label: \"Religion\",\n    tableName: \"regions.2012_census.religious_affiliation_of_population\",\n    Icon: PeopleAltIcon,\n  },\n  {\n    label: \"2019 Presidential Election\",\n    tableName: \"regions_ec.2019_election_presidential.result\",\n    Icon: BallotIcon,\n  },\n  {\n    label: \"2015 Presidential Election\",\n    tableName: \"regions_ec.2015_election_presidential.result\",\n    Icon: BallotIcon,\n  },\n];\n\nexport default function ColorPanel(props) {\n  const { activeMapColorTableName, onClickMapColor } = props;\n\n  function renderListItem({ label, tableName, Icon }) {\n    const selected = activeMapColorTableName === tableName;\n\n    function onClick() {\n      onClickMapColor(tableName);\n    }\n\n    return (\n      <ListItemButton key={label} selected={selected} onClick={onClick}>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText primary={label} />\n      </ListItemButton>\n    );\n  }\n\n  return (\n    <Paper\n      sx={{\n        position: \"absolute\",\n        zIndex: 1000,\n\n        left: 20,\n        bottom: 20,\n\n        width: 300,\n        height: 200,\n      }}\n    >\n      <List dense subheader={<ListSubheader>Color Map by</ListSubheader>}>\n        {COLOR_INFO_LIST.map(renderListItem)}\n      </List>\n    </Paper>\n  );\n}\n","import Paper from \"@mui/material/Paper\";\n\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport List from \"@mui/material/List\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport MapIcon from \"@mui/icons-material/Map\";\n\nimport Ents, { ENT } from \"../../base/Ents.js\";\n\nconst REGION_TYPE_LIST = [ENT.PROVINCE, ENT.DISTRICT, ENT.DSD, ENT.ED, ENT.PD];\n\nexport default function MapPanel(props) {\n  const { activeMapID, onClickMap } = props;\n\n  function renderListItem(mapID) {\n    const selected = activeMapID === mapID;\n\n    function onClick() {\n      onClickMap(mapID);\n    }\n\n    return (\n      <ListItemButton key={mapID} selected={selected} onClick={onClick}>\n        <ListItemIcon>\n          <MapIcon />\n        </ListItemIcon>\n        <ListItemText primary={Ents.getEntTypeLongName(mapID)} />\n      </ListItemButton>\n    );\n  }\n\n  return (\n    <Paper\n      sx={{\n        position: \"absolute\",\n        zIndex: 1000,\n\n        left: 20,\n        top: 20,\n        width: 200,\n        height: 300,\n      }}\n    >\n      <List dense subheader={<ListSubheader>Split Regions by</ListSubheader>}>\n        {REGION_TYPE_LIST.map(renderListItem)}\n      </List>\n    </Paper>\n  );\n}\n","import { Component } from \"react\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport GIG2 from \"../../base/GIG2.js\";\nimport Ents, { ENT } from \"../../base/Ents.js\";\nimport RegionGroup from \"../../base/RegionGroup.js\";\nimport GeoMap from \"../molecules/GeoMap.js\";\nimport MainPanel from \"../molecules/MainPanel.js\";\nimport GroupSelector from \"../molecules/GroupSelector.js\";\nimport MultiRegionView from \"../../nonstate/molecules/MultiRegionView.js\";\nimport ColorPanel, {\n  COLOR_INFO_LIST,\n} from \"../../nonstate/molecules/ColorPanel.js\";\nimport MapPanel from \"../../nonstate/molecules/MapPanel.js\";\n\nconst DEFAULT_ZOOM = 8;\nconst DEFAULT_LATLNG = [7.9, 81.5];\nconst DEFAULT_MAP_ID = ENT.DISTRICT;\n\nconst TABLE_NAMES = COLOR_INFO_LIST.map((d) => d.tableName);\nconst DEFAULT_TABLE_NAME = TABLE_NAMES[0];\n\nasync function getTableIndexIndex() {\n  return await DataStructures.buildIndex(TABLE_NAMES, GIG2.getTableIndex);\n}\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Data\n      activeMapID: DEFAULT_MAP_ID,\n      mapInfoIndex: undefined,\n      groupIndex: undefined,\n      activeGroupID: undefined,\n      tableIndexIndex: undefined,\n      activeMapColorTableName: DEFAULT_TABLE_NAME,\n\n      // View\n      showGroupSelector: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { activeMapID } = this.state;\n    await this.updateMap(activeMapID);\n  }\n\n  async updateMap(activeMapID) {\n    const mapInfoIndex = await RegionGroup.getMapInfoIndex();\n    const { groupIndex, regionToGroup } = mapInfoIndex[activeMapID];\n    const activeGroupID = Object.keys(groupIndex)[0];\n\n    let tableIndexIndex = this.state.tableIndexIndex;\n    if (tableIndexIndex === undefined) {\n      tableIndexIndex = await getTableIndexIndex();\n    }\n\n    this.setState({\n      mapInfoIndex,\n      groupIndex,\n      regionToGroup,\n      activeGroupID,\n      activeMapID,\n      tableIndexIndex,\n    });\n  }\n\n  async expandRegion(regionID) {\n    // Update regionToGroup\n    let { regionToGroup } = this.state;\n    const regionType = Ents.getEntType(regionID);\n    const childRegionType = Ents.getChildType(regionType);\n\n    if (!childRegionType) {\n      return;\n    }\n\n    const childRegionIDs = await Ents.getChildIDs(regionID, childRegionType);\n    const regionGroup = regionToGroup[regionID];\n    regionToGroup = childRegionIDs.reduce(function (\n      regionToGroup,\n      childRegionID\n    ) {\n      regionToGroup[childRegionID] = regionGroup;\n      return regionToGroup;\n    },\n    regionToGroup);\n    delete regionToGroup[regionID];\n\n    this.setState({ regionToGroup });\n  }\n\n  async onClickRegion(regionID, altKey) {\n    if (altKey) {\n      await this.expandRegion(regionID);\n    } else {\n      let { regionToGroup, activeGroupID } = this.state;\n      regionToGroup[regionID] =\n        regionToGroup[regionID] === activeGroupID ? undefined : activeGroupID;\n      this.setState({ regionToGroup });\n    }\n  }\n\n  onClickGroup(groupID) {\n    this.setState({ activeGroupID: groupID });\n  }\n\n  onGroupSelectorShow() {\n    this.setState({ showGroupSelector: true });\n  }\n  onGroupSelectorHide() {\n    this.setState({ showGroupSelector: false });\n  }\n\n  onClickMapColor(activeMapColorTableName) {\n    this.setState({ activeMapColorTableName });\n  }\n  async onClickMap(activeMapID) {\n    await this.updateMap(activeMapID);\n  }\n\n  render() {\n    const {\n      groupIndex,\n      showGroupSelector,\n      regionToGroup,\n      activeGroupID,\n      mapInfoIndex,\n      tableIndexIndex,\n      activeMapColorTableName,\n      activeMapID,\n    } = this.state;\n\n    if (!groupIndex) {\n      return \"...\";\n    }\n\n    const activeTableIndex = tableIndexIndex[activeMapColorTableName];\n\n    function funcGetRegionStyle(regionID) {\n      const regionRow = activeTableIndex[regionID];\n      console.debug(regionID, activeTableIndex, regionRow);\n\n      const maxValueKey = GIG2.getMaxValueKey(regionRow);\n      const maxValueP = GIG2.getValueKeyP(regionRow, maxValueKey);\n\n      let opacity, color;\n      if (maxValueP > 0.5) {\n        opacity = Math.max(0, maxValueP - 0.5) + 0.5;\n        color = GIG2.getTableRowColor(regionRow);\n      } else {\n        opacity = 0.75;\n        color = \"gray\";\n      }\n\n      return {\n        fillColor: color,\n        fillOpacity: opacity,\n        color: \"lightgray\",\n        weight: 1,\n      };\n    }\n\n    return (\n      <div>\n        <GeoMap center={DEFAULT_LATLNG} zoom={DEFAULT_ZOOM}>\n          <MultiRegionView\n            regionToGroup={regionToGroup}\n            activeGroupID={activeGroupID}\n            onClickRegion={this.onClickRegion.bind(this)}\n            funcGetRegionStyle={funcGetRegionStyle}\n          />\n        </GeoMap>\n        <MainPanel\n          groupIndex={groupIndex}\n          regionToGroup={regionToGroup}\n          onClickGroup={this.onClickGroup.bind(this)}\n          activeGroupID={activeGroupID}\n          activeTableIndex={activeTableIndex}\n          activeMapColorTableName={activeMapColorTableName}\n        />\n        <GroupSelector\n          showGroupSelector={showGroupSelector}\n          onGroupSelectorHide={this.onGroupSelectorHide.bind(this)}\n          mapInfoIndex={mapInfoIndex}\n          onClickMap={this.onClickMap.bind(this)}\n        />\n        <ColorPanel\n          activeMapColorTableName={activeMapColorTableName}\n          onClickMapColor={this.onClickMapColor.bind(this)}\n        />\n        <MapPanel\n          activeMapID={activeMapID}\n          onClickMap={this.onClickMap.bind(this)}\n          activeTableIndex={activeTableIndex}\n        />\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport HomePage from \"./stateful/pages/HomePage.js\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}