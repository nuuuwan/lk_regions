{"version":3,"sources":["constants/Constants.js","base/Ents.js","base/GeoData.js","base/RegionGroup.js","stateful/molecules/GeoMap.js","stateful/atoms/RegionChip.js","stateful/molecules/GroupPanel.js","constants/ColorConstants.js","stateful/molecules/GroupSelector.js","nonstate/molecules/RegionView.js","stateful/pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["APP_NAME","ENT","COUNTRY","PROVINCE","DISTRICT","DSD","GND","PD","ED","MOH","LG","UNKNOWN","REGION_TYPES","Object","values","ENT_TYPE_TO_LONG_NAME","Country","PARENT_TO_CHILD","undefined","Ents","entID","substring","length","regionType","entType","url","WWW","tsv","getEntsByType","ents","reduce","entIndex","ent","id","entTypes","Promise","all","map","a","getEntIndexByType","entIndexList","allEntIndex","iEnt","getEntType","JSON","parse","json","parentType","parentID","childRegionType","filter","includes","StringX","toTitleCase","isPointInPolygon","point","polygon","y","x","nIntersects","i","j","xi","yi","xj","yj","isPointInMultiMultiPolygon","multiMultiPolygon","multiPolygon","GeoData","regionID","regionIDs","getGeoForRegion","geoDataList","regionToGeo","iRegion","getRegionTree","regionTree","regionMap","iRegionType","keys","isFoundRegion","isPointInRegion","RegionGroup","regionEnts","groupList","regionEnt","groupID","name","groupIndex","group","regionToGroup","mapID","getEntTypeLongName","getGroupDataForRegionType","mapInfoList","mapInfoIndex","mapInfo","GeoMap","this","props","center","zoom","MapContainer","TileLayer","ZoomControl","position","children","Component","RegionChip","state","getEnt","setState","Chip","label","sx","m","Grid","container","direction","alignItems","item","Typography","variant","fontSize","fontWeight","paddingLeft","toUpperCase","GroupPanel","onClickGroup","activeGroupID","groupToRegion","entries","push","Paper","top","right","width","height","p","zIndex","overflow","iGroup","color","groupKey","onClick","Box","regionKey","showGroupSelector","onGroupSelectorHide","onClickMap","Drawer","anchor","open","onClose","maxWidth","bgcolor","List","iMap","key","ListItem","disablePadding","e","ListItemButton","ListItemIcon","ListItemText","primary","RegionView","geoJSON","onClickRegion","style","fillColor","weight","fillOpacity","GeoJSON","data","onEachFeature","feature","layer","on","click","originalEvent","altKey","DEFAULT_LATLNG","HomePage","selectedMapID","updateMap","getMapInfoIndex","getRegionToGeo","getChildType","getChildIDs","childRegionIDs","regionGroup","childRegionID","expandRegion","type","coordinates","bind","flexGrow","AppBar","Toolbar","component","display","xs","md","IconButton","size","onGroupSelectorShow","renderRegions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.401631f9.chunk.js","sourcesContent":["export const APP_NAME = \"lk_regions\";\n","import { WWW, StringX } from \"@nuuuwan/utils-js-dev\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const ENT = {\n  COUNTRY: \"country\",\n  PROVINCE: \"province\",\n  DISTRICT: \"district\",\n  DSD: \"dsd\",\n  GND: \"gnd\",\n  PD: \"pd\",\n  ED: \"ed\",\n  MOH: \"moh\",\n  LG: \"lg\",\n  UNKNOWN: \"unknown-entity\",\n};\n\nexport const REGION_TYPES = Object.values(ENT);\n\nexport const ENT_TYPE_TO_LONG_NAME = {\n  [ENT.Country]: \"Country\",\n  [ENT.PROVINCE]: \"Province\",\n  [ENT.DISTRICT]: \"District\",\n  [ENT.DSD]: \"Divisional Secretariat Division\",\n  [ENT.GND]: \"Grama Niladhari Division\",\n  [ENT.PD]: \"Polling Division\",\n  [ENT.ED]: \"Electoral District\",\n  [ENT.MOH]: \"Medical Officer of Health Area\",\n  [ENT.LG]: \"Local Authority Area\",\n};\n\nexport const PARENT_TO_CHILD = {\n  [ENT.COUNTRY]: ENT.PROVINCE,\n  [ENT.PROVINCE]: ENT.DISTRICT,\n  [ENT.DISTRICT]: ENT.DSD,\n  [ENT.DSD]: ENT.GND,\n  [ENT.GND]: undefined,\n  [ENT.PD]: undefined,\n  [ENT.ED]: [ENT.PD],\n};\n\nexport default class Ents {\n  static getEntType(entID) {\n    if (entID.substring(0, 2) === \"LK\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 2:\n          return ENT.COUNTRY;\n        case 4:\n          return ENT.PROVINCE;\n        case 5:\n          return ENT.DISTRICT;\n        case 7:\n          return ENT.DSD;\n        case 10:\n          return ENT.GND;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n    if (entID.substring(0, 2) === \"EC\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 5:\n          return ENT.ED;\n        case 6:\n          return ENT.PD;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n\n    if (entID.substring(0, 2) === \"LG\") {\n      return ENT.LG;\n    }\n\n    if (entID.substring(0, 3) === \"MOH\") {\n      return ENT.MOH;\n    }\n    return ENT.UNKNOWN;\n  }\n  static getRegionName(regionType) {\n    return ENT_TYPE_TO_LONG_NAME[regionType];\n  }\n  static async getEntsByType(entType) {\n    const url = `/${APP_NAME}/data/ents/${entType}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getEntIndexByType(entType) {\n    const ents = await Ents.getEntsByType(entType);\n    return ents.reduce(function (entIndex, ent) {\n      entIndex[ent.id] = ent;\n      return entIndex;\n    }, {});\n  }\n\n  static async getAllEntIndex() {\n    const entTypes = REGION_TYPES;\n    const entIndexList = await Promise.all(\n      entTypes.map(async function (entType) {\n        return await Ents.getEntIndexByType(entType);\n      })\n    );\n\n    return entTypes.reduce(function (allEntIndex, entType, iEnt) {\n      allEntIndex[entType] = entIndexList[iEnt];\n      return allEntIndex;\n    }, {});\n  }\n\n  static async getEnt(entID) {\n    const entType = Ents.getEntType(entID);\n    const entIndex = await Ents.getEntIndexByType(entType);\n    let ent = entIndex[entID];\n    if (ent[\"centroid\"]) {\n      ent[\"centroid\"] = JSON.parse(ent[\"centroid\"]);\n    }\n    return ent;\n  }\n\n  static async getParentToChildMap() {\n    const url = `data/ents/parent_to_child_map.json`;\n    return await WWW.json(url);\n  }\n\n  static getChildType(parentType) {\n    return PARENT_TO_CHILD[parentType];\n  }\n\n  static async getChildIDs(parentID, childRegionType) {\n    const ents = await Ents.getEntsByType(childRegionType);\n    return ents\n      .map((ent) => ent.id)\n      .filter((entID) => entID.includes(parentID) || parentID === \"LK\");\n  }\n\n  static getEntTypeLongName(entType) {\n    return ENT_TYPE_TO_LONG_NAME[entType]\n      ? ENT_TYPE_TO_LONG_NAME[entType]\n      : StringX.toTitleCase(entType);\n  }\n}\n","import { WWW } from \"@nuuuwan/utils-js-dev\";\nimport Ents, { REGION_TYPES } from \"./Ents.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const DEFAULT_ZOOM = 8;\nexport const DEFAULT_LATLNG = [7.836173, 80.403442];\n\nexport function getDefaultLatLngZoomStr() {\n  return getLatLngZoomStr(DEFAULT_LATLNG, DEFAULT_ZOOM);\n}\n\nexport function getLatLngZoomStr([lat, lng], zoom) {\n  return `${lat}N,${lng}E,${zoom}z`;\n}\n\nexport function parseLatLngZoomStr(locationStr) {\n  const [latStr, lngStr, zoomStr] = locationStr.split(\",\");\n  const lat = parseFloat(latStr.replace(\"N\", \"\"));\n  const lng = parseFloat(lngStr.replace(\"E\", \"\"));\n  const zoom = parseInt(zoomStr.replace(\"z\", \"\"));\n  return { lat, lng, zoom };\n}\n\nexport function getBrowserLatLng(callback) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      callback([position.coords.latitude, position.coords.longitude]);\n    });\n  } else {\n    callback(DEFAULT_LATLNG);\n  }\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [y, x] = point;\n  let nIntersects = 0;\n  for (let i in polygon) {\n    const j = (i - 1 + polygon.length) % polygon.length;\n\n    const [xi, yi] = polygon[i];\n    const [xj, yj] = polygon[j];\n\n    // eslint-disable-next-line no-mixed-operators\n    const a = yi > y !== yj > y;\n    // eslint-disable-next-line no-mixed-operators\n    const b = x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n    const intersect = a && b;\n    if (intersect) {\n      nIntersects += 1;\n    }\n  }\n  return nIntersects % 2 === 1;\n}\n\nfunction isPointInMultiMultiPolygon(point, multiMultiPolygon) {\n  for (let i in multiMultiPolygon) {\n    const multiPolygon = multiMultiPolygon[i];\n    for (let j in multiPolygon) {\n      const polygon = multiPolygon[j];\n      if (isPointInPolygon(point, polygon)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport default class GeoData {\n  static async getGeoForRegion(regionID) {\n    const regionType = Ents.getEntType(regionID);\n    const url = `/${APP_NAME}/data/geo/${regionType}/${regionID}.json`;\n    return await WWW.json(url);\n  }\n\n  static async getRegionToGeo(regionIDs) {\n    const geoDataList = await Promise.all(\n      regionIDs.map(async function (regionID) {\n        return await GeoData.getGeoForRegion(regionID);\n      })\n    );\n\n    return regionIDs.reduce(function (regionToGeo, regionID, iRegion) {\n      regionToGeo[regionID] = geoDataList[iRegion];\n      return regionToGeo;\n    }, {});\n  }\n\n  static async getRegionTree() {\n    const url = `/${APP_NAME}/data/geo/region_tree.json`;\n    return await WWW.json(url);\n  }\n\n  static async isPointInRegion(point, regionID) {\n    const multiPolygon = await GeoData.getGeoForRegion(regionID);\n    return isPointInMultiMultiPolygon(point, multiPolygon);\n  }\n\n  static async getRegionsForPoint(point) {\n    let regionTree = await GeoData.getRegionTree();\n\n    let regionMap = {};\n\n    for (let iRegionType in REGION_TYPES) {\n      const regionType = REGION_TYPES[iRegionType];\n      const regionIDs = Object.keys(regionTree);\n      let isFoundRegion = false;\n      for (let iRegion in regionIDs) {\n        const regionID = regionIDs[iRegion];\n        const _isPointInRegion = await GeoData.isPointInRegion(point, regionID);\n        if (_isPointInRegion) {\n          regionMap[regionType] = regionID;\n          regionTree = regionTree[regionID];\n          isFoundRegion = true;\n        }\n      }\n      if (!isFoundRegion) {\n        break;\n      }\n    }\n    return regionMap;\n  }\n}\n\nexport function roundLatLng(latLng) {\n  const Q = 1000_000;\n  return latLng.map((x) => Math.round(parseFloat(x) * Q) / Q);\n}\n","import Ents, { ENT } from \"./Ents.js\";\n\nexport default class RegionGroup {\n  static async getGroupDataForRegionType(regionType) {\n    const regionEnts = await Ents.getEntsByType(regionType);\n    const groupList = regionEnts.map(function (regionEnt) {\n      return {\n        groupID: regionEnt.id,\n        name: regionEnt.name,\n      };\n    });\n\n    const groupIndex = groupList.reduce(function (groupIndex, group) {\n      groupIndex[group.groupID] = group;\n      return groupIndex;\n    }, {});\n\n    const regionIDs = regionEnts\n      .map((regionEnt) => regionEnt.id)\n      .filter(function (regionID) {\n        return regionType !== ENT.PD || regionID.substring(5) !== \"P\";\n      });\n\n    const regionToGroup = regionIDs.reduce(function (regionToGroup, regionID) {\n      regionToGroup[regionID] = regionID;\n      return regionToGroup;\n    }, {});\n\n    return {\n      mapID: \"by_\" + regionType,\n      name: \"By \" + Ents.getEntTypeLongName(regionType),\n      groupIndex,\n      regionToGroup,\n    };\n  }\n\n  static async getMapInfoIndex() {\n    const mapInfoList = await Promise.all(\n      [ENT.PROVINCE, ENT.DISTRICT, ENT.DSD, ENT.ED, ENT.PD].map(async function (\n        regionType\n      ) {\n        return await RegionGroup.getGroupDataForRegionType(regionType);\n      })\n    );\n    return mapInfoList.reduce(function (mapInfoIndex, mapInfo) {\n      mapInfoIndex[mapInfo.mapID] = mapInfo;\n      return mapInfoIndex;\n    }, {});\n  }\n}\n","import { Component } from \"react\";\nimport { MapContainer, TileLayer, ZoomControl } from \"react-leaflet\";\n\nimport \"./GeoMap.css\";\n\nconst URL_FORMAT = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\nexport default class GeoMap extends Component {\n  render() {\n    const { center, zoom } = this.props;\n    return (\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer url={URL_FORMAT} />\n        <ZoomControl zoom={zoom} position=\"bottomright\" />\n        {this.props.children}\n      </MapContainer>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Grid from \"@mui/material/Grid\";\nimport Ents from \"../../base/Ents.js\";\n\nexport default class RegionChip extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { regionEnt: undefined };\n  }\n  async componentDidMount() {\n    const regionEnt = await Ents.getEnt(this.props.regionID);\n    this.setState({ regionEnt });\n  }\n  render() {\n    const { regionEnt } = this.state;\n    const { regionID } = this.props;\n    if (!regionEnt) {\n      return <Chip label={regionID} />;\n    }\n    const regionType = Ents.getEntType(regionID);\n    return (\n      <Chip\n        sx={{ m: 0.2 }}\n        label={\n          <Grid container direction=\"row\" alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"body2\" sx={{ fontSize: 9, fontWeight: 800 }}>\n                {regionEnt.name}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography\n                variant=\"body2\"\n                sx={{ paddingLeft: 0.5, fontSize: 9 }}\n              >\n                {regionType.toUpperCase()}\n              </Typography>\n            </Grid>\n          </Grid>\n        }\n      />\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport RegionChip from \"../atoms/RegionChip.js\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport {\n  COLOR_ACTIVE,\n  COLOR_NOT_ACTIVE,\n} from \"../../constants/ColorConstants.js\";\n\nexport default class GroupPanel extends Component {\n  render() {\n    const { groupIndex, regionToGroup, onClickGroup, activeGroupID } =\n      this.props;\n\n    const groupToRegion = Object.entries(regionToGroup).reduce(function (\n      groupToRegion,\n      [regionID, groupID]\n    ) {\n      if (groupID) {\n        if (!groupToRegion[groupID]) {\n          groupToRegion[groupID] = [];\n        }\n        groupToRegion[groupID].push(regionID);\n      }\n      return groupToRegion;\n    },\n    {});\n\n    return (\n      <Paper\n        sx={{\n          position: \"absolute\",\n          top: 60,\n          right: 10,\n          width: 400,\n          height: \"70vh\",\n          m: 2,\n          p: 2,\n          zIndex: 1000,\n          overflow: \"scroll\",\n        }}\n      >\n        {Object.entries(groupIndex).map(function ([groupID, group], iGroup) {\n          let regionIDs = groupToRegion[groupID];\n          if (!regionIDs) {\n            regionIDs = [];\n          }\n          function onClickGroupInner() {\n            onClickGroup(groupID);\n          }\n\n          const color =\n            activeGroupID === groupID ? COLOR_ACTIVE : COLOR_NOT_ACTIVE;\n\n          const groupKey = `group-${groupID}`;\n          return (\n            <Paper\n              key={groupKey}\n              sx={{ m: 1, p: 1 }}\n              onClick={onClickGroupInner}\n            >\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item>\n                  <CircleIcon sx={{ color }} fontSize=\"smallest\" />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"overline\" sx={{ paddingLeft: 1 }}>\n                    {group.name}\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              <Box>\n                {regionIDs.map(function (regionID, iRegion) {\n                  const regionKey = `region-${regionID}`;\n                  return <RegionChip key={regionKey} regionID={regionID} />;\n                })}\n              </Box>\n            </Paper>\n          );\n        })}\n      </Paper>\n    );\n  }\n}\n","export const COLOR_ACTIVE = \"red\";\nexport const COLOR_NOT_ACTIVE = \"white\";\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MapIcon from \"@mui/icons-material/Map\";\n\nexport default class GroupPanel extends Component {\n  render() {\n    const { showGroupSelector, onGroupSelectorHide, mapInfoIndex, onClickMap } =\n      this.props;\n\n    return (\n      <Drawer\n        anchor={\"right\"}\n        open={showGroupSelector}\n        onClose={onGroupSelectorHide}\n        sx={{ width: 400 }}\n      >\n        <Paper\n          sx={{\n            width: 400,\n          }}\n        >\n          <Box\n            sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}\n          >\n            <List>\n              {Object.entries(mapInfoIndex).map(function (\n                [mapID, mapInfo],\n                iMap\n              ) {\n                const key = `map-info-${iMap}`;\n                const onClickMapInner = function (e) {\n                  onClickMap(mapID);\n                };\n                return (\n                  <ListItem key={key} disablePadding onClick={onClickMapInner}>\n                    <ListItemButton>\n                      <ListItemIcon>\n                        <MapIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={mapInfo.name} />\n                    </ListItemButton>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Box>\n        </Paper>\n      </Drawer>\n    );\n  }\n}\n","import { GeoJSON } from \"react-leaflet\";\n\nconst BORDER_COLOR = \"gray\";\nconst BORDER_WIDTH = 1;\nconst FILL_OPACITY = 0.8;\n\nexport default function RegionView(props) {\n  const { regionID, geoJSON, color, onClickRegion } = props;\n  const style = {\n    fillColor: color,\n    color: BORDER_COLOR,\n    weight: BORDER_WIDTH,\n    fillOpacity: FILL_OPACITY,\n  };\n  const onEachFeature = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        onClickRegion(regionID, e.originalEvent.altKey);\n      },\n    });\n  };\n\n  return <GeoJSON data={geoJSON} style={style} onEachFeature={onEachFeature} />;\n}\n","import { Component } from \"react\";\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MapIcon from \"@mui/icons-material/Map\";\n\nimport Ents from \"../../base/Ents.js\";\nimport GeoData from \"../../base/GeoData.js\";\nimport RegionGroup from \"../../base/RegionGroup.js\";\nimport GeoMap from \"../molecules/GeoMap.js\";\nimport GroupPanel from \"../molecules/GroupPanel.js\";\nimport GroupSelector from \"../molecules/GroupSelector.js\";\nimport RegionView from \"../../nonstate/molecules/RegionView.js\";\n\nconst DEFAULT_ZOOM = 8;\nconst DEFAULT_LATLNG = [6.9157, 79.8636];\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMapID: \"by_province\",\n      mapInfoIndex: undefined,\n      activeGroupID: undefined,\n      regionToGeo: undefined,\n      groupIndex: undefined,\n      showGroupSelector: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { selectedMapID } = this.state;\n    await this.updateMap(selectedMapID);\n  }\n\n  async updateMap(selectedMapID) {\n    const mapInfoIndex = await RegionGroup.getMapInfoIndex();\n    const { groupIndex, regionToGroup } = mapInfoIndex[selectedMapID];\n    const activeGroupID = Object.keys(groupIndex)[0];\n    const regionIDs = Object.keys(regionToGroup);\n    const regionToGeo = await GeoData.getRegionToGeo(regionIDs);\n\n    this.setState({\n      mapInfoIndex,\n      groupIndex,\n      regionToGroup,\n      activeGroupID,\n      regionToGeo,\n      selectedMapID,\n    });\n  }\n\n  async expandRegion(regionID) {\n    let { regionToGroup } = this.state;\n    const regionType = Ents.getEntType(regionID);\n    const childRegionType = Ents.getChildType(regionType);\n    const childRegionIDs = await Ents.getChildIDs(regionID, childRegionType);\n    const regionGroup = regionToGroup[regionID];\n\n    regionToGroup = childRegionIDs.reduce(function (\n      regionToGroup,\n      childRegionID\n    ) {\n      regionToGroup[childRegionID] = regionGroup;\n      return regionToGroup;\n    },\n    regionToGroup);\n    delete regionToGroup[regionID];\n\n    const regionIDs = Object.keys(regionToGroup);\n    const regionToGeo = await GeoData.getRegionToGeo(regionIDs);\n    this.setState({ regionToGroup, regionToGeo });\n  }\n\n  async onClickRegion(regionID, altKey) {\n    if (altKey) {\n      await this.expandRegion(regionID);\n    } else {\n      let { regionToGroup, activeGroupID } = this.state;\n      regionToGroup[regionID] =\n        regionToGroup[regionID] === activeGroupID ? undefined : activeGroupID;\n      this.setState({ regionToGroup });\n    }\n  }\n\n  onClickGroup(groupID) {\n    this.setState({ activeGroupID: groupID });\n  }\n\n  onGroupSelectorShow() {\n    this.setState({ showGroupSelector: true });\n  }\n  onGroupSelectorHide() {\n    this.setState({ showGroupSelector: false });\n  }\n\n  async onClickMap(mapID) {\n    await this.updateMap(mapID);\n  }\n\n  renderRegions() {\n    const { regionToGroup, activeGroupID, regionToGeo } = this.state;\n    return Object.entries(regionToGroup).map(\n      function ([regionID, groupID], iRegion) {\n        const geoJSON = {\n          type: \"MultiPolygon\",\n          coordinates: regionToGeo[regionID],\n        };\n        let color;\n        if (activeGroupID === groupID) {\n          color = \"red\";\n        } else if (groupID) {\n          color = \"pink\";\n        } else {\n          color = \"lightgray\";\n        }\n\n        const key = `region-${iRegion}-${regionID}`;\n        return (\n          <RegionView\n            key={key}\n            regionID={regionID}\n            geoJSON={geoJSON}\n            color={color}\n            onClickRegion={this.onClickRegion.bind(this)}\n          />\n        );\n      }.bind(this)\n    );\n  }\n\n  render() {\n    const {\n      groupIndex,\n      showGroupSelector,\n      regionToGroup,\n      activeGroupID,\n      mapInfoIndex,\n      selectedMapID,\n    } = this.state;\n    if (!groupIndex) {\n      return \"...\";\n    }\n    return (\n      <div>\n        <Box sx={{ flexGrow: 1 }}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n                {selectedMapID}\n              </Typography>\n\n              <Box sx={{ flexGrow: 1 }} />\n              <Box sx={{ display: { xs: \"none\", md: \"flex\" } }}>\n                <IconButton\n                  size=\"large\"\n                  aria-label=\"show 4 new mails\"\n                  color=\"inherit\"\n                  onClick={this.onGroupSelectorShow.bind(this)}\n                >\n                  <MapIcon />\n                </IconButton>\n              </Box>\n            </Toolbar>\n          </AppBar>\n        </Box>\n        <GeoMap center={DEFAULT_LATLNG} zoom={DEFAULT_ZOOM}>\n          {this.renderRegions()}\n        </GeoMap>\n        <GroupPanel\n          groupIndex={groupIndex}\n          regionToGroup={regionToGroup}\n          onClickGroup={this.onClickGroup.bind(this)}\n          activeGroupID={activeGroupID}\n        />\n        <GroupSelector\n          showGroupSelector={showGroupSelector}\n          onGroupSelectorHide={this.onGroupSelectorHide.bind(this)}\n          mapInfoIndex={mapInfoIndex}\n          onClickMap={this.onClickMap.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport HomePage from \"./stateful/pages/HomePage.js\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}