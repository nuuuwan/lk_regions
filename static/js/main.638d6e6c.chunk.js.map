{"version":3,"sources":["base/BaseUtils.js","constants/ColorConstants.js","constants/Constants.js","base/GIG2.js","base/Ents.js","base/RegionGroup.js","stateful/molecules/GeoMap.js","stateful/atoms/RegionChip.js","nonstate/molecules/PartitionsTabContent.js","stateful/molecules/MainPanel.js","stateful/molecules/GroupSelector.js","base/GeoData.js","stateful/atoms/RegionView.js","nonstate/molecules/MultiRegionView.js","nonstate/molecules/ColorPanel.js","stateful/pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["DataStructures","keyIDs","asyncFuncKeyToData","Promise","all","map","keyID","a","dataList","reduce","index","iKey","keyToValue","Object","entries","valueToKeys","key","value","push","COLOR_SL_FLAG","FIELD_NAME_TO_COLOR","SLFP","PA","UPFA","SLPP","UNP","NDF","JVP","LSSP","ACTC","SLMP","other","others","bharatha","burgher","chetty","indian_tamil","malay","moor","sinhalese","sri_lankan_tamil","buddhist","islam","hindu","roman_catholic","other_christian","female","male","son_or_daughter","head","wife_or_husband","grandchild_or_great_grand_child","other_relative","non_relative","son_or_daughter_in_law","parent_of_head_or_spouse","boarder","domestic_employee","clergy","tv","mobile","radio","fixed_tp","pc","laptop","fax","fire_wood","gas","kerosene","electricity","asbestos","tile","metal_sheet","concrete","zink_aluminium_sheet","cement","tile_or_granite_or_terrazo","mud","wood","occupants_burn","occupants_bury","collected_by_local_authorities","occupants_composting_solid_waste","tap_within_unit_main_line","tap_within_premises_but_outside_unit_main_line","tap_outside_premises_main_line","protected_well_within_premises","protected_well_outside_premises","unprotected_well","tube_well","rural_water_projects","river_or_tank_or_stream","bottled_water","single_house_single_floor","single_house_double_floor","single_house_more_than_2_floors","row_house_or_line_room","attached_house_or_annex","twin_house","flat","condominium","hut_or_shanty","owned_by_a_household_member","rent_or_lease_privately_owned","rent_or_lease_government_owned","occupied_free_of_rent","encroached","water_seal_and_connected_to_a_piped_sewer_system","water_seal_and_connected_to_a_septic_tank","pour_flush_toilet_not_water_seal","direct_pit","not_using_a_toilet","electricity_national_electricity_network","solar_power","bio_gas","housing_unit","collective_living_quarter","non_housing_unit","semi_permanent","permanent","improvised","unclassified","married_registered","never_married","widowed","married_customary","separated_not_legally","divorced","legally_separated","cement_block_or_stone","brick","cabook","soil_bricks","plank_or_metal_sheet","cadjan_or_palmyrah","occupied","vacant","APP_NAME","adhocValueKeyToColor","GIG2","tableName","url","WWW","tsv","getTable","table","valueKeys","filterValueCellKeys","tableIndex","tableRow","cleanTableRow","includes","parseFloat","keys","filter","cellKey","maxValueKey","valueKey","minValueP","maxValueP","sumValue","getSumValues","valueP","Math","min","max","MathX","sum","sumValues","Color","getRandomHSLA","getMaxValueKey","getValueKeyColor","sortedValuePs","getValueKeyP","sort","nValues","length","valuePToRankP","iValue","ENT","COUNTRY","PROVINCE","DISTRICT","DSD","GND","PD","ED","MOH","LG","UNKNOWN","REGION_TYPES","values","ENT_TYPE_TO_LONG_NAME","Country","PARENT_TO_CHILD","undefined","Ents","entID","substring","regionType","entType","getEntsByType","ents","entIndex","ent","id","entTypes","getEntIndexByType","entIndexList","allEntIndex","iEnt","getEntType","JSON","parse","json","parentType","parentID","childRegionType","StringX","toTitleCase","RegionGroup","regionEnts","groupList","regionEnt","groupID","name","groupIndex","group","regionIDs","regionID","regionToGroup","mapID","getEntTypeLongName","getGroupDataForRegionType","mapInfoList","mapInfoIndex","mapInfo","GeoMap","this","props","center","zoom","MapContainer","TileLayer","ZoomControl","position","children","Component","RegionChip","state","getEnt","setState","Chip","label","sx","m","Grid","container","direction","alignItems","item","Typography","variant","fontSize","fontWeight","paddingLeft","toUpperCase","PartitionsTabContent","onClickGroup","activeGroupID","groupToRegion","invertDict","Box","iGroup","color","groupKey","onClick","paddingBottom","iRegion","regionKey","TAB","DATA","MAP_QUALITY","REGIONS","DEFAULT_TAB","MainPanel","activeTab","event","newActiveTab","Paper","top","right","width","height","p","zIndex","overflow","TabContext","borderBottom","borderColor","TabList","onChange","onTabChange","bind","tab","Tab","TabPanel","showGroupSelector","onGroupSelectorHide","onClickMap","Drawer","anchor","open","onClose","maxWidth","bgcolor","List","iMap","ListItem","disablePadding","e","ListItemButton","ListItemIcon","ListItemText","primary","isPointInPolygon","point","polygon","y","x","nIntersects","i","j","xi","yi","xj","yj","isPointInMultiMultiPolygon","multiMultiPolygon","multiPolygon","GeoData","getCoordinatesForRegion","geoDataList","regionToGeo","getRegionTree","regionTree","regionMap","iRegionType","isFoundRegion","isPointInRegion","RegionView","geoJSON","isComponentMounted","geoData","type","coordinates","onClickRegion","style","fillColor","weight","fillOpacity","GeoJSON","data","onEachFeature","feature","layer","on","click","originalEvent","altKey","MultiRegionView","funcGetRegionColor","COLOR_INFO_LIST","Icon","PeopleAltIcon","BallotIcon","ColorPanel","activeMapColorTableName","onClickMapColor","left","bottom","subheader","ListSubheader","selected","DEFAULT_LATLNG","TABLE_NAMES","d","getTableIndexIndex","buildIndex","getTableIndex","HomePage","selectedMapID","tableIndexIndex","updateMap","getMapInfoIndex","getChildType","getChildIDs","childRegionIDs","regionGroup","childRegionID","expandRegion","regionRow","getTableRowColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.638d6e6c.chunk.js","sourcesContent":["export class DataStructures {\n  static async buildIndex(keyIDs, asyncFuncKeyToData) {\n    const dataList = await Promise.all(\n      keyIDs.map(async function (keyID) {\n        return await asyncFuncKeyToData(keyID);\n      })\n    );\n\n    return keyIDs.reduce(function (index, keyID, iKey) {\n      index[keyID] = dataList[iKey];\n      return index;\n    }, {});\n  }\n\n  static invertDict(keyToValue) {\n    return Object.entries(keyToValue).reduce(function (\n      valueToKeys,\n      [key, value]\n    ) {\n      if (value) {\n        if (!valueToKeys[value]) {\n          valueToKeys[value] = [];\n        }\n        valueToKeys[value].push(key);\n      }\n      return valueToKeys;\n    },\n    {});\n  }\n}\n","export const COLOR_ACTIVE = \"red\";\nexport const COLOR_NOT_ACTIVE = \"white\";\n\nexport const COLOR_SL_FLAG = {\n  SINHALA: \"hsl(355, 63%, 34%)\",\n  TAMIL: \"hsl(21, 100%, 50%)\",\n  MOOR: \"hsl(165, 100%, 17%)\",\n  BUDDHIST: \"hsl(43, 100%, 50%)\",\n};\nexport const FIELD_NAME_TO_COLOR = {\n  // political parties\n  SLFP: \"blue\",\n  PA: \"blue\",\n  UPFA: \"blue\",\n  SLPP: COLOR_SL_FLAG.SINHALA,\n  UNP: \"green\",\n  NDF: \"green\",\n  JVP: \"red\",\n  LSSP: \"red\",\n  ACTC: COLOR_SL_FLAG.TAMIL,\n  SLMP: \"purple\",\n\n  other: \"ghostwhite\",\n  others: \"gray\",\n  // ethnicity_of_population\n  bharatha: \"cyan\",\n  burgher: \"purple\",\n  chetty: \"blue\",\n  indian_tamil: COLOR_SL_FLAG.TAMIL,\n  malay: COLOR_SL_FLAG.MOOR,\n  moor: COLOR_SL_FLAG.MOOR,\n  sinhalese: COLOR_SL_FLAG.SINHALA,\n  sri_lankan_tamil: COLOR_SL_FLAG.TAMIL,\n  // religious_affiliation_of_population\n  buddhist: COLOR_SL_FLAG.BUDDHIST,\n  islam: COLOR_SL_FLAG.MOOR,\n  hindu: COLOR_SL_FLAG.TAMIL,\n  roman_catholic: \"purple\",\n  other_christian: \"blue\",\n  // gender_of_population\n  female: \"pink\",\n  male: \"lightblue\",\n  // age_group_of_population\n  // relationship_to_household_head_of_population\n  son_or_daughter: \"green\",\n  head: \"blue\",\n  wife_or_husband: \"pink\",\n  grandchild_or_great_grand_child: \"darkgreen\",\n  other_relative: \"yellow\",\n  non_relative: \"silver\",\n  son_or_daughter_in_law: \"lightgreen\",\n  parent_of_head_or_spouse: \"red\",\n  boarder: \"gray\",\n  domestic_employee: \"brown\",\n  clergy: \"yellow\", //\n  // communication_items_owned_by_household\n  tv: \"green\",\n  mobile: \"purple\",\n  radio: \"maroon\",\n  fixed_tp: \"blue\",\n  pc: \"red\",\n  laptop: \"pink\",\n  fax: \"silver\",\n  // cooking_fuel_of_household\n  fire_wood: \"brown\",\n  gas: \"orange\",\n  kerosene: \"purple\",\n  electricity: \"blue\",\n  // roof_type_in_housing_unit\n\n  // rooms_in_housing_unit\n  // floor_type_in_housing_unit\n  asbestos: \"gray\",\n  tile: \"darkred\",\n  metal_sheet: \"silver\",\n  concrete: \"green\",\n  zink_aluminium_sheet: \"blue\",\n  cement: \"lightgray\",\n  tile_or_granite_or_terrazo: \"orange\",\n  mud: \"darkbrown\",\n  wood: \"brown\",\n  // solid_waste_disposal_by_household\n  occupants_burn: \"red\",\n  occupants_bury: \"orange\",\n  collected_by_local_authorities: \"blue\",\n  occupants_composting_solid_waste: \"green\",\n  // source_of_drinking_water_of_household\n  tap_within_unit_main_line: \"darkgreen\",\n  tap_within_premises_but_outside_unit_main_line: \"green\",\n  tap_outside_premises_main_line: \"orange\",\n  protected_well_within_premises: \"blue\",\n  protected_well_outside_premises: \"lightblue\",\n  unprotected_well: \"purple\",\n  tube_well: \"cyan\",\n  rural_water_projects: \"pink\",\n  river_or_tank_or_stream: \"red\", //\n  bottled_water: \"silver\",\n  // structure_of_housing_units\n  single_house_single_floor: \"darkgreen\",\n  single_house_double_floor: \"green\",\n  single_house_more_than_2_floors: \"lightgreen\",\n  row_house_or_line_room: \"orange\",\n  attached_house_or_annex: \"silver\",\n  twin_house: \"cyan\",\n  flat: \"blue\",\n  condominium: \"purple\",\n  hut_or_shanty: \"red\",\n\n  // housing_ownership_status_of_household\n  owned_by_a_household_member: \"green\",\n  rent_or_lease_privately_owned: \"blue\",\n  rent_or_lease_government_owned: \"cyan\",\n  occupied_free_of_rent: \"orange\",\n  encroached: \"red\",\n  // toilet_facilities_of_household\n  water_seal_and_connected_to_a_piped_sewer_system: \"green\",\n  water_seal_and_connected_to_a_septic_tank: \"lightgreen\",\n  pour_flush_toilet_not_water_seal: \"orange\",\n  direct_pit: \"red\",\n  not_using_a_toilet: \"black\",\n  // lighting_of_household\n  electricity_national_electricity_network: \"blue\",\n  solar_power: \"yellow\",\n  bio_gas: \"orange\",\n  // living_quarters\n  housing_unit: \"green\",\n  collective_living_quarter: \"orange\",\n  non_housing_unit: \"red\",\n  // type_of_housing_unit\n  semi_permanent: \"orange\",\n  permanent: \"green\",\n  improvised: \"red\",\n  unclassified: \"black\",\n  // marital_status_of_population\n  married_registered: \"blue\",\n  never_married: \"green\",\n  widowed: \"orange\",\n  married_customary: \"lightblue\",\n  separated_not_legally: \"pink\",\n  divorced: \"red\",\n  legally_separated: \"maroon\",\n  // wall_type_in_housing_units\n  cement_block_or_stone: \"darkgray\",\n  brick: \"maroon\",\n  cabook: \"orange\",\n  soil_bricks: \"green\",\n  plank_or_metal_sheet: \"silver\",\n  // occupation_status_of_housing_units\n  cadjan_or_palmyrah: \"orange\",\n  occupied: \"green\",\n  vacant: \"red\",\n  // year_of_construction_of_housing_unit\n  // persons_living_in_housing_unit\n};\n","export const APP_NAME = \"lk_regions\";\n","import { MathX, Color, WWW } from \"@nuuuwan/utils-js-dev\";\nimport { FIELD_NAME_TO_COLOR } from \"../constants/ColorConstants.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nlet adhocValueKeyToColor = {};\n\nconst ID_FIELD_KEY = \"entity_id\";\n\nexport default class GIG2 {\n  static async getTable(tableName) {\n    const url = `/${APP_NAME}/data/gig2/${tableName}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getTableIndex(tableName) {\n    const table = await GIG2.getTable(tableName);\n    const valueKeys = GIG2.filterValueCellKeys(table[0]);\n    return table.reduce(function (tableIndex, tableRow) {\n      tableIndex[tableRow[ID_FIELD_KEY]] = Object.entries(tableRow).reduce(\n        function (cleanTableRow, [key, value]) {\n          if (valueKeys.includes(key)) {\n            value = parseFloat(value);\n          }\n          cleanTableRow[key] = value;\n          return cleanTableRow;\n        },\n        {}\n      );\n      return tableIndex;\n    }, {});\n  }\n\n  static filterValueCellKeys(tableRow) {\n    const valueCellKeys = Object.keys(tableRow).filter(\n      (cellKey) =>\n        !(\n          cellKey.includes(\"total_\") ||\n          cellKey.includes(\"_id\") ||\n          cellKey.includes(\"result_ut\") ||\n          cellKey.includes(\"valid\") ||\n          cellKey.includes(\"rejected\") ||\n          cellKey.includes(\"polled\") ||\n          cellKey.includes(\"electors\")\n        )\n    );\n    return valueCellKeys;\n  }\n\n  static getMaxValueKey(tableRow) {\n    const valueKeys = GIG2.filterValueCellKeys(tableRow);\n    const maxValueKey = valueKeys.reduce(function (maxValueKey, valueKey) {\n      if (tableRow[maxValueKey] < tableRow[valueKey]) {\n        maxValueKey = valueKey;\n      }\n      return maxValueKey;\n    }, valueKeys[0]);\n    return maxValueKey;\n  }\n\n  static getMinMaxValueP(dataList, valueKey) {\n    return dataList.reduce(\n      function ([minValueP, maxValueP], tableRow) {\n        const sumValue = GIG2.getSumValues(tableRow);\n        const value = tableRow[valueKey];\n        const valueP = value / sumValue;\n        return [Math.min(minValueP, valueP), Math.max(maxValueP, valueP)];\n      },\n      [1.0, 0.0]\n    );\n  }\n\n  static getSumValues(tableRow) {\n    const valueKeys = GIG2.filterValueCellKeys(tableRow);\n    return MathX.sum(valueKeys.map((valueKey) => tableRow[valueKey]));\n  }\n\n  static getValueKeyP(tableRow, valueKey) {\n    const sumValues = GIG2.getSumValues(tableRow);\n    return tableRow[valueKey] / sumValues;\n  }\n\n  static getValueKeyColor(valueKey) {\n    if (FIELD_NAME_TO_COLOR[valueKey]) {\n      return FIELD_NAME_TO_COLOR[valueKey];\n    }\n    if (!adhocValueKeyToColor[valueKey]) {\n      adhocValueKeyToColor[valueKey] = Color.getRandomHSLA();\n    }\n    return adhocValueKeyToColor[valueKey];\n  }\n\n  static getTableRowColor(tableRow) {\n    const maxValueKey = GIG2.getMaxValueKey(tableRow);\n    return GIG2.getValueKeyColor(maxValueKey);\n  }\n\n  static getValuePToRankP(dataList, valueKey) {\n    const sortedValuePs = dataList\n      .map((tableRow) => GIG2.getValueKeyP(tableRow, valueKey))\n      .sort();\n    const nValues = sortedValuePs.length;\n    return sortedValuePs.reduce(function (valuePToRankP, valueP, iValue) {\n      valuePToRankP[valueP] = iValue / nValues;\n      return valuePToRankP;\n    }, {});\n  }\n}\n","import { WWW, StringX } from \"@nuuuwan/utils-js-dev\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const ENT = {\n  COUNTRY: \"country\",\n  PROVINCE: \"province\",\n  DISTRICT: \"district\",\n  DSD: \"dsd\",\n  GND: \"gnd\",\n  PD: \"pd\",\n  ED: \"ed\",\n  MOH: \"moh\",\n  LG: \"lg\",\n  UNKNOWN: \"unknown-entity\",\n};\n\nexport const REGION_TYPES = Object.values(ENT);\n\nexport const ENT_TYPE_TO_LONG_NAME = {\n  [ENT.Country]: \"Country\",\n  [ENT.PROVINCE]: \"Province\",\n  [ENT.DISTRICT]: \"District\",\n  [ENT.DSD]: \"Divisional Secretariat Division\",\n  [ENT.GND]: \"Grama Niladhari Division\",\n  [ENT.PD]: \"Polling Division\",\n  [ENT.ED]: \"Electoral District\",\n  [ENT.MOH]: \"Medical Officer of Health Area\",\n  [ENT.LG]: \"Local Authority Area\",\n};\n\nexport const PARENT_TO_CHILD = {\n  [ENT.COUNTRY]: ENT.PROVINCE,\n  [ENT.PROVINCE]: ENT.DISTRICT,\n  [ENT.DISTRICT]: ENT.DSD,\n  [ENT.DSD]: ENT.GND,\n  [ENT.GND]: undefined,\n  [ENT.PD]: undefined,\n  [ENT.ED]: [ENT.PD],\n};\n\nexport default class Ents {\n  static getEntType(entID) {\n    if (entID.substring(0, 2) === \"LK\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 2:\n          return ENT.COUNTRY;\n        case 4:\n          return ENT.PROVINCE;\n        case 5:\n          return ENT.DISTRICT;\n        case 7:\n          return ENT.DSD;\n        case 10:\n          return ENT.GND;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n    if (entID.substring(0, 2) === \"EC\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 5:\n          return ENT.ED;\n        case 6:\n          return ENT.PD;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n\n    if (entID.substring(0, 2) === \"LG\") {\n      return ENT.LG;\n    }\n\n    if (entID.substring(0, 3) === \"MOH\") {\n      return ENT.MOH;\n    }\n    return ENT.UNKNOWN;\n  }\n  static getRegionName(regionType) {\n    return ENT_TYPE_TO_LONG_NAME[regionType];\n  }\n  static async getEntsByType(entType) {\n    const url = `/${APP_NAME}/data/ents/${entType}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getEntIndexByType(entType) {\n    const ents = await Ents.getEntsByType(entType);\n    return ents.reduce(function (entIndex, ent) {\n      entIndex[ent.id] = ent;\n      return entIndex;\n    }, {});\n  }\n\n  static async getAllEntIndex() {\n    const entTypes = REGION_TYPES;\n    const entIndexList = await Promise.all(\n      entTypes.map(async function (entType) {\n        return await Ents.getEntIndexByType(entType);\n      })\n    );\n\n    return entTypes.reduce(function (allEntIndex, entType, iEnt) {\n      allEntIndex[entType] = entIndexList[iEnt];\n      return allEntIndex;\n    }, {});\n  }\n\n  static async getEnt(entID) {\n    const entType = Ents.getEntType(entID);\n    const entIndex = await Ents.getEntIndexByType(entType);\n    let ent = entIndex[entID];\n    if (ent[\"centroid\"]) {\n      ent[\"centroid\"] = JSON.parse(ent[\"centroid\"]);\n    }\n    return ent;\n  }\n\n  static async getParentToChildMap() {\n    const url = `data/ents/parent_to_child_map.json`;\n    return await WWW.json(url);\n  }\n\n  static getChildType(parentType) {\n    return PARENT_TO_CHILD[parentType];\n  }\n\n  static async getChildIDs(parentID, childRegionType) {\n    const ents = await Ents.getEntsByType(childRegionType);\n    return ents\n      .map((ent) => ent.id)\n      .filter((entID) => entID.includes(parentID) || parentID === \"LK\");\n  }\n\n  static getEntTypeLongName(entType) {\n    return ENT_TYPE_TO_LONG_NAME[entType]\n      ? ENT_TYPE_TO_LONG_NAME[entType]\n      : StringX.toTitleCase(entType);\n  }\n}\n","import Ents, { ENT } from \"./Ents.js\";\n\nexport default class RegionGroup {\n  static async getGroupDataForRegionType(regionType) {\n    const regionEnts = await Ents.getEntsByType(regionType);\n    const groupList = regionEnts.map(function (regionEnt) {\n      return {\n        groupID: regionEnt.id,\n        name: regionEnt.name,\n      };\n    });\n\n    const groupIndex = groupList.reduce(function (groupIndex, group) {\n      groupIndex[group.groupID] = group;\n      return groupIndex;\n    }, {});\n\n    const regionIDs = regionEnts\n      .map((regionEnt) => regionEnt.id)\n      .filter(function (regionID) {\n        return regionType !== ENT.PD || regionID.substring(5) !== \"P\";\n      });\n\n    const regionToGroup = regionIDs.reduce(function (regionToGroup, regionID) {\n      regionToGroup[regionID] = regionID;\n      return regionToGroup;\n    }, {});\n\n    return {\n      mapID: \"by_\" + regionType,\n      name: \"By \" + Ents.getEntTypeLongName(regionType),\n      groupIndex,\n      regionToGroup,\n    };\n  }\n\n  static async getMapInfoIndex() {\n    const mapInfoList = await Promise.all(\n      [ENT.PROVINCE, ENT.DISTRICT, ENT.DSD, ENT.ED, ENT.PD].map(async function (\n        regionType\n      ) {\n        return await RegionGroup.getGroupDataForRegionType(regionType);\n      })\n    );\n    return mapInfoList.reduce(function (mapInfoIndex, mapInfo) {\n      mapInfoIndex[mapInfo.mapID] = mapInfo;\n      return mapInfoIndex;\n    }, {});\n  }\n}\n","import { Component } from \"react\";\nimport { MapContainer, TileLayer, ZoomControl } from \"react-leaflet\";\n\nimport \"./GeoMap.css\";\n\nconst URL_FORMAT = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\nexport default class GeoMap extends Component {\n  render() {\n    const { center, zoom } = this.props;\n    return (\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer url={URL_FORMAT} />\n        <ZoomControl zoom={zoom} position=\"bottomright\" />\n        {this.props.children}\n      </MapContainer>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Grid from \"@mui/material/Grid\";\nimport Ents from \"../../base/Ents.js\";\n\nexport default class RegionChip extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { regionEnt: undefined };\n  }\n  async componentDidMount() {\n    const regionEnt = await Ents.getEnt(this.props.regionID);\n    this.setState({ regionEnt });\n  }\n  render() {\n    const { regionEnt } = this.state;\n    const { regionID } = this.props;\n    if (!regionEnt) {\n      return <Chip label={regionID} />;\n    }\n    const regionType = Ents.getEntType(regionID);\n    return (\n      <Chip\n        sx={{ m: 0.2 }}\n        label={\n          <Grid container direction=\"row\" alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"body2\" sx={{ fontSize: 9, fontWeight: 800 }}>\n                {regionEnt.name}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography\n                variant=\"body2\"\n                sx={{ paddingLeft: 0.5, fontSize: 9 }}\n              >\n                {regionType.toUpperCase()}\n              </Typography>\n            </Grid>\n          </Grid>\n        }\n      />\n    );\n  }\n}\n","import Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport RegionChip from \"../../stateful/atoms/RegionChip.js\";\n\nimport {\n  COLOR_ACTIVE,\n  COLOR_NOT_ACTIVE,\n} from \"../../constants/ColorConstants.js\";\n\nexport default function PartitionsTabContent(props) {\n  const { groupIndex, regionToGroup, onClickGroup, activeGroupID } = props;\n\n  const groupToRegion = DataStructures.invertDict(regionToGroup);\n\n  return (\n    <Box>\n      {Object.entries(groupIndex).map(function ([groupID, group], iGroup) {\n        let regionIDs = groupToRegion[groupID];\n        if (!regionIDs) {\n          regionIDs = [];\n        }\n        function onClickGroupInner() {\n          onClickGroup(groupID);\n        }\n\n        const color =\n          activeGroupID === groupID ? COLOR_ACTIVE : COLOR_NOT_ACTIVE;\n\n        const groupKey = `group-${groupID}`;\n        return (\n          <Box key={groupKey} onClick={onClickGroupInner}>\n            <Grid container direction=\"row\" alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"overline\">{group.name}</Typography>\n              </Grid>\n              <Grid item>\n                <CircleIcon sx={{ color }} fontSize=\"smallest\" />\n              </Grid>\n            </Grid>\n\n            <Box sx={{ paddingBottom: 2 }}>\n              {regionIDs.map(function (regionID, iRegion) {\n                const regionKey = `region-${regionID}`;\n                return <RegionChip key={regionKey} regionID={regionID} />;\n              })}\n            </Box>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Tab from \"@mui/material/Tab\";\nimport TabContext from \"@mui/lab/TabContext\";\nimport TabList from \"@mui/lab/TabList\";\nimport TabPanel from \"@mui/lab/TabPanel\";\n\nimport PartitionsTabContent from \"../../nonstate/molecules/PartitionsTabContent.js\";\n\nconst TAB = {\n  DATA: \"Data\",\n  MAP_QUALITY: \"Map Quality\",\n  REGIONS: \"Regions\",\n};\nconst DEFAULT_TAB = TAB.REGIONS;\n\nexport default class MainPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { activeTab: DEFAULT_TAB };\n  }\n\n  onTabChange(event, newActiveTab) {\n    this.setState({ activeTab: newActiveTab });\n  }\n\n  render() {\n    const { groupIndex, regionToGroup, onClickGroup, activeGroupID } =\n      this.props;\n    const { activeTab } = this.state;\n\n    return (\n      <Paper\n        sx={{\n          position: \"absolute\",\n          top: 10,\n          right: 10,\n          width: 400,\n          height: \"70vh\",\n          m: 2,\n          p: 2,\n          zIndex: 1000,\n          overflow: \"scroll\",\n        }}\n      >\n        <TabContext value={activeTab}>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <TabList\n              onChange={this.onTabChange.bind(this)}\n              aria-label=\"lab API tabs example\"\n            >\n              {[TAB.DATA, TAB.MAP_QUALITY, TAB.REGIONS].map(function (tab) {\n                return <Tab label={tab} value={tab} />;\n              })}\n            </TabList>\n          </Box>\n\n          <TabPanel value={TAB.DATA}>TODO</TabPanel>\n          <TabPanel value={TAB.MAP_QUALITY}>TODO</TabPanel>\n          <TabPanel value={TAB.REGIONS}>\n            <PartitionsTabContent\n              groupIndex={groupIndex}\n              regionToGroup={regionToGroup}\n              onClickGroup={onClickGroup}\n              activeGroupID={activeGroupID}\n            />\n          </TabPanel>\n        </TabContext>\n      </Paper>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MapIcon from \"@mui/icons-material/Map\";\n\nexport default class MainPanel extends Component {\n  render() {\n    const { showGroupSelector, onGroupSelectorHide, mapInfoIndex, onClickMap } =\n      this.props;\n\n    return (\n      <Drawer\n        anchor={\"right\"}\n        open={showGroupSelector}\n        onClose={onGroupSelectorHide}\n        sx={{ width: 400 }}\n      >\n        <Paper\n          sx={{\n            width: 400,\n          }}\n        >\n          <Box\n            sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}\n          >\n            <List>\n              {Object.entries(mapInfoIndex).map(function (\n                [mapID, mapInfo],\n                iMap\n              ) {\n                const key = `map-info-${iMap}`;\n                const onClickMapInner = function (e) {\n                  onClickMap(mapID);\n                };\n                return (\n                  <ListItem key={key} disablePadding onClick={onClickMapInner}>\n                    <ListItemButton>\n                      <ListItemIcon>\n                        <MapIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={mapInfo.name} />\n                    </ListItemButton>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Box>\n        </Paper>\n      </Drawer>\n    );\n  }\n}\n","import { WWW } from \"@nuuuwan/utils-js-dev\";\nimport Ents, { REGION_TYPES } from \"./Ents.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const DEFAULT_ZOOM = 8;\nexport const DEFAULT_LATLNG = [7.836173, 80.403442];\n\nexport function getDefaultLatLngZoomStr() {\n  return getLatLngZoomStr(DEFAULT_LATLNG, DEFAULT_ZOOM);\n}\n\nexport function getLatLngZoomStr([lat, lng], zoom) {\n  return `${lat}N,${lng}E,${zoom}z`;\n}\n\nexport function parseLatLngZoomStr(locationStr) {\n  const [latStr, lngStr, zoomStr] = locationStr.split(\",\");\n  const lat = parseFloat(latStr.replace(\"N\", \"\"));\n  const lng = parseFloat(lngStr.replace(\"E\", \"\"));\n  const zoom = parseInt(zoomStr.replace(\"z\", \"\"));\n  return { lat, lng, zoom };\n}\n\nexport function getBrowserLatLng(callback) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      callback([position.coords.latitude, position.coords.longitude]);\n    });\n  } else {\n    callback(DEFAULT_LATLNG);\n  }\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [y, x] = point;\n  let nIntersects = 0;\n  for (let i in polygon) {\n    const j = (i - 1 + polygon.length) % polygon.length;\n\n    const [xi, yi] = polygon[i];\n    const [xj, yj] = polygon[j];\n\n    // eslint-disable-next-line no-mixed-operators\n    const a = yi > y !== yj > y;\n    // eslint-disable-next-line no-mixed-operators\n    const b = x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n    const intersect = a && b;\n    if (intersect) {\n      nIntersects += 1;\n    }\n  }\n  return nIntersects % 2 === 1;\n}\n\nfunction isPointInMultiMultiPolygon(point, multiMultiPolygon) {\n  for (let i in multiMultiPolygon) {\n    const multiPolygon = multiMultiPolygon[i];\n    for (let j in multiPolygon) {\n      const polygon = multiPolygon[j];\n      if (isPointInPolygon(point, polygon)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport default class GeoData {\n  static async getCoordinatesForRegion(regionID) {\n    const regionType = Ents.getEntType(regionID);\n    const url = `/${APP_NAME}/data/geo/${regionType}/${regionID}.json`;\n    return await WWW.json(url);\n  }\n\n  static async getRegionToGeo(regionIDs) {\n    const geoDataList = await Promise.all(\n      regionIDs.map(async function (regionID) {\n        return await GeoData.getCoordinatesForRegion(regionID);\n      })\n    );\n\n    return regionIDs.reduce(function (regionToGeo, regionID, iRegion) {\n      regionToGeo[regionID] = geoDataList[iRegion];\n      return regionToGeo;\n    }, {});\n  }\n\n  static async getRegionTree() {\n    const url = `/${APP_NAME}/data/geo/region_tree.json`;\n    return await WWW.json(url);\n  }\n\n  static async isPointInRegion(point, regionID) {\n    const multiPolygon = await GeoData.getCoordinatesForRegion(regionID);\n    return isPointInMultiMultiPolygon(point, multiPolygon);\n  }\n\n  static async getRegionsForPoint(point) {\n    let regionTree = await GeoData.getRegionTree();\n\n    let regionMap = {};\n\n    for (let iRegionType in REGION_TYPES) {\n      const regionType = REGION_TYPES[iRegionType];\n      const regionIDs = Object.keys(regionTree);\n      let isFoundRegion = false;\n      for (let iRegion in regionIDs) {\n        const regionID = regionIDs[iRegion];\n        const _isPointInRegion = await GeoData.isPointInRegion(point, regionID);\n        if (_isPointInRegion) {\n          regionMap[regionType] = regionID;\n          regionTree = regionTree[regionID];\n          isFoundRegion = true;\n        }\n      }\n      if (!isFoundRegion) {\n        break;\n      }\n    }\n    return regionMap;\n  }\n}\n\nexport function roundLatLng(latLng) {\n  const Q = 1000_000;\n  return latLng.map((x) => Math.round(parseFloat(x) * Q) / Q);\n}\n","import { Component } from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\nimport GeoData from \"../../base/GeoData.js\";\n\nconst BORDER_COLOR = \"gray\";\nconst BORDER_WIDTH = 1;\nconst FILL_OPACITY = 0.8;\n\nexport default class RegionView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { geoJSON: null };\n    this.isComponentMounted = false;\n  }\n\n  async componentDidMount() {\n    this.isComponentMounted = true;\n    const { regionID } = this.props;\n    const geoData = await GeoData.getCoordinatesForRegion(regionID);\n    const geoJSON = {\n      type: \"MultiPolygon\",\n      coordinates: geoData,\n    };\n    if (this.isComponentMounted) {\n      this.setState({ geoJSON });\n    }\n  }\n\n  compoentnDidUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    const { geoJSON } = this.state;\n    if (geoJSON === null) {\n      return null;\n    }\n\n    const { regionID, color, onClickRegion } = this.props;\n    const style = {\n      fillColor: color,\n      color: BORDER_COLOR,\n      weight: BORDER_WIDTH,\n      fillOpacity: FILL_OPACITY,\n    };\n    const onEachFeature = (feature, layer) => {\n      layer.on({\n        click: function (e) {\n          onClickRegion(regionID, e.originalEvent.altKey);\n        },\n      });\n    };\n\n    return (\n      <GeoJSON\n        key={`geo-json-${regionID}`}\n        data={geoJSON}\n        style={style}\n        onEachFeature={onEachFeature}\n      />\n    );\n  }\n}\n","import RegionView from \"../../stateful/atoms/RegionView.js\";\n\nexport default function MultiRegionView(props) {\n  const { regionToGroup, onClickRegion, funcGetRegionColor } = props;\n\n  return Object.entries(regionToGroup).map(function (\n    [regionID, groupID],\n    iRegion\n  ) {\n    const key = `region-${regionID}`;\n    return (\n      <RegionView\n        key={key}\n        regionID={regionID}\n        onClickRegion={onClickRegion}\n        color={funcGetRegionColor(regionID)}\n      />\n    );\n  });\n}\n","import Paper from \"@mui/material/Paper\";\n\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport List from \"@mui/material/List\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport BallotIcon from \"@mui/icons-material/Ballot\";\n\nexport const COLOR_INFO_LIST = [\n  {\n    label: \"Ethnicity\",\n    tableName: \"regions.2012_census.ethnicity_of_population\",\n    Icon: PeopleAltIcon,\n  },\n  {\n    label: \"Religion\",\n    tableName: \"regions.2012_census.religious_affiliation_of_population\",\n    Icon: PeopleAltIcon,\n  },\n  {\n    label: \"2019 Presidential Election\",\n    tableName: \"regions_ec.2019_election_presidential.result\",\n    Icon: BallotIcon,\n  },\n];\n\nexport default function ColorPanel(props) {\n  const { activeMapColorTableName, onClickMapColor } = props;\n\n  function renderListItem({ label, tableName, Icon }) {\n    const selected = activeMapColorTableName === tableName;\n\n    function onClick() {\n      onClickMapColor(tableName);\n    }\n\n    return (\n      <ListItemButton key={label} selected={selected} onClick={onClick}>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText primary={label} />\n      </ListItemButton>\n    );\n  }\n\n  return (\n    <Paper\n      sx={{\n        position: \"absolute\",\n        zIndex: 1000,\n\n        left: 10,\n        bottom: 10,\n        width: 300,\n        height: 200,\n\n        m: 1,\n        p: 1,\n      }}\n    >\n      <List subheader={<ListSubheader>Color Map by</ListSubheader>}>\n        {COLOR_INFO_LIST.map(renderListItem)}\n      </List>\n    </Paper>\n  );\n}\n","import { Component } from \"react\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport GIG2 from \"../../base/GIG2.js\";\nimport Ents from \"../../base/Ents.js\";\nimport RegionGroup from \"../../base/RegionGroup.js\";\nimport GeoMap from \"../molecules/GeoMap.js\";\nimport MainPanel from \"../molecules/MainPanel.js\";\nimport GroupSelector from \"../molecules/GroupSelector.js\";\nimport MultiRegionView from \"../../nonstate/molecules/MultiRegionView.js\";\nimport ColorPanel, {\n  COLOR_INFO_LIST,\n} from \"../../nonstate/molecules/ColorPanel.js\";\n\nconst DEFAULT_ZOOM = 8;\nconst DEFAULT_LATLNG = [6.9157, 79.8636];\nconst DEFAULT_MAP_ID = \"by_province\";\n\nconst TABLE_NAMES = COLOR_INFO_LIST.map((d) => d.tableName);\n\nasync function getTableIndexIndex() {\n  return await DataStructures.buildIndex(TABLE_NAMES, GIG2.getTableIndex);\n}\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Data\n      selectedMapID: DEFAULT_MAP_ID,\n      mapInfoIndex: undefined,\n      groupIndex: undefined,\n      activeGroupID: undefined,\n      tableIndexIndex: undefined,\n      activeMapColorTableName: TABLE_NAMES[0],\n\n      // View\n      showGroupSelector: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { selectedMapID } = this.state;\n    await this.updateMap(selectedMapID);\n  }\n\n  async updateMap(selectedMapID) {\n    const mapInfoIndex = await RegionGroup.getMapInfoIndex();\n    const { groupIndex, regionToGroup } = mapInfoIndex[selectedMapID];\n    const activeGroupID = Object.keys(groupIndex)[0];\n\n    let tableIndexIndex = this.state.tableIndexIndex;\n    if (tableIndexIndex === undefined) {\n      tableIndexIndex = await getTableIndexIndex();\n    }\n\n    this.setState({\n      mapInfoIndex,\n      groupIndex,\n      regionToGroup,\n      activeGroupID,\n      selectedMapID,\n      tableIndexIndex,\n    });\n  }\n\n  async expandRegion(regionID) {\n    // Update regionToGroup\n    let { regionToGroup } = this.state;\n    const regionType = Ents.getEntType(regionID);\n    const childRegionType = Ents.getChildType(regionType);\n    const childRegionIDs = await Ents.getChildIDs(regionID, childRegionType);\n    const regionGroup = regionToGroup[regionID];\n    regionToGroup = childRegionIDs.reduce(function (\n      regionToGroup,\n      childRegionID\n    ) {\n      regionToGroup[childRegionID] = regionGroup;\n      return regionToGroup;\n    },\n    regionToGroup);\n    delete regionToGroup[regionID];\n\n    this.setState({ regionToGroup });\n  }\n\n  async onClickRegion(regionID, altKey) {\n    if (altKey) {\n      await this.expandRegion(regionID);\n    } else {\n      let { regionToGroup, activeGroupID } = this.state;\n      regionToGroup[regionID] =\n        regionToGroup[regionID] === activeGroupID ? undefined : activeGroupID;\n      this.setState({ regionToGroup });\n    }\n  }\n\n  onClickGroup(groupID) {\n    this.setState({ activeGroupID: groupID });\n  }\n\n  onGroupSelectorShow() {\n    this.setState({ showGroupSelector: true });\n  }\n  onGroupSelectorHide() {\n    this.setState({ showGroupSelector: false });\n  }\n\n  async onClickMap(mapID) {\n    await this.updateMap(mapID);\n  }\n\n  onClickMapColor(activeMapColorTableName) {\n    this.setState({ activeMapColorTableName });\n  }\n\n  render() {\n    const {\n      groupIndex,\n      showGroupSelector,\n      regionToGroup,\n      activeGroupID,\n      mapInfoIndex,\n      tableIndexIndex,\n      activeMapColorTableName,\n    } = this.state;\n\n    if (!groupIndex) {\n      return \"...\";\n    }\n\n    function funcGetRegionColor(regionID) {\n      const tableIndex = tableIndexIndex[activeMapColorTableName];\n      const regionRow = tableIndex[regionID];\n      return GIG2.getTableRowColor(regionRow);\n    }\n\n    return (\n      <div>\n        <GeoMap center={DEFAULT_LATLNG} zoom={DEFAULT_ZOOM}>\n          <MultiRegionView\n            regionToGroup={regionToGroup}\n            activeGroupID={activeGroupID}\n            onClickRegion={this.onClickRegion.bind(this)}\n            funcGetRegionColor={funcGetRegionColor}\n          />\n        </GeoMap>\n        <MainPanel\n          groupIndex={groupIndex}\n          regionToGroup={regionToGroup}\n          onClickGroup={this.onClickGroup.bind(this)}\n          activeGroupID={activeGroupID}\n        />\n        <GroupSelector\n          showGroupSelector={showGroupSelector}\n          onGroupSelectorHide={this.onGroupSelectorHide.bind(this)}\n          mapInfoIndex={mapInfoIndex}\n          onClickMap={this.onClickMap.bind(this)}\n        />\n        <ColorPanel\n          activeMapColorTableName={activeMapColorTableName}\n          onClickMapColor={this.onClickMapColor.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport HomePage from \"./stateful/pages/HomePage.js\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}