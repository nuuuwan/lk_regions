{"version":3,"sources":["base/BaseUtils.js","constants/ColorConstants.js","constants/Constants.js","base/GIG2.js","base/Ents.js","base/RegionGroup.js","stateful/molecules/GeoMap.js","nonstate/molecules/DataTable.js","nonstate/molecules/MapPropertiesView.js","stateful/molecules/MainPanel.js","base/GeoData.js","stateful/atoms/RegionView.js","stateful/molecules/MultiRegionView.js","nonstate/molecules/ColorPanel.js","nonstate/molecules/MapPanel.js","stateful/pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["DataStructures","keyIDs","asyncFuncKeyToData","Promise","all","map","keyID","a","dataList","reduce","index","iKey","keyToValue","Object","entries","valueToKeys","key","value","push","Humanize","x","toPrecision","xSum","p","StatX","xList","n","length","MathX","sum","mean","Math","sqrt","variance","COLOR_SL_FLAG","FIELD_NAME_TO_COLOR","SLFP","PA","UPFA","SLPP","UNP","NDF","JVP","LSSP","ACTC","SLMP","other","others","bharatha","burgher","chetty","indian_tamil","tamil","malay","moor","muslim","sinhalese","sri_lankan_tamil","buddhist","islam","hindu","roman_catholic","other_christian","christian","female","male","son_or_daughter","head","wife_or_husband","grandchild_or_great_grand_child","other_relative","non_relative","son_or_daughter_in_law","parent_of_head_or_spouse","boarder","domestic_employee","clergy","tv","mobile","radio","fixed_tp","pc","laptop","fax","fire_wood","gas","kerosene","electricity","asbestos","tile","metal_sheet","concrete","zink_aluminium_sheet","cement","tile_or_granite_or_terrazo","mud","wood","occupants_burn","occupants_bury","collected_by_local_authorities","occupants_composting_solid_waste","tap_within_unit_main_line","tap_within_premises_but_outside_unit_main_line","tap_outside_premises_main_line","protected_well_within_premises","protected_well_outside_premises","unprotected_well","tube_well","rural_water_projects","river_or_tank_or_stream","bottled_water","single_house_single_floor","single_house_double_floor","single_house_more_than_2_floors","row_house_or_line_room","attached_house_or_annex","twin_house","flat","condominium","hut_or_shanty","owned_by_a_household_member","rent_or_lease_privately_owned","rent_or_lease_government_owned","occupied_free_of_rent","encroached","water_seal_and_connected_to_a_piped_sewer_system","water_seal_and_connected_to_a_septic_tank","pour_flush_toilet_not_water_seal","direct_pit","not_using_a_toilet","electricity_national_electricity_network","solar_power","bio_gas","housing_unit","collective_living_quarter","non_housing_unit","semi_permanent","permanent","improvised","unclassified","married_registered","never_married","widowed","married_customary","separated_not_legally","divorced","legally_separated","cement_block_or_stone","brick","cabook","soil_bricks","plank_or_metal_sheet","cadjan_or_palmyrah","occupied","vacant","APP_NAME","adhocValueKeyToColor","KEY_OTHER","MERGE_ALIAS_MAP","GIG2","tableName","url","WWW","tsv","getTable","table","valueKeys","getValueKeys","tableIndex","tableRow","cleanTableRow","includes","parseFloat","keys","filter","cellKey","maxValueKey","valueKey","minValueP","maxValueP","sumValue","getSumValues","valueP","min","max","sumValues","Color","getRandomHSLA","getMaxValueKey","getValueKeyColor","sortedValuePs","getValueKeyP","sort","nValues","valuePToRankP","iValue","values","firstRow","getFirstRow","totalRow","sortedNonOtherKeys","otherValueKeys","expandedTableRow","nonOtherKey","otherValueSum","mergedTableRow","mergedKey","mergedTableIndex","regionID","mergeKeysOnTableRow","mergeKeysOnTable","getTotalRow","valueSum","getValueSum","nonOtherValueKeys","b","expandedTableIndex","expandOtherOnTableRow","ENT","COUNTRY","PROVINCE","DISTRICT","DSD","GND","PD","ED","MOH","LG","UNKNOWN","REGION_TYPES","ENT_TYPE_TO_LONG_NAME","Country","PARENT_TO_CHILD","undefined","Ents","entID","substring","regionType","entType","getEntsByType","ents","entIndex","ent","id","entTypes","getEntIndexByType","entIndexList","allEntIndex","iEnt","getEntType","JSON","parse","json","parentType","parentID","childRegionType","StringX","toTitleCase","RegionGroup","mapName","rawInfo","groupNameToRegionIDs","groupIndex","groupID","name","regionToGroup","mapID","regionEnts","groupList","regionEnt","group","regionIDs","getEntTypeLongName","buildIndex","getMapInfoForRegionType","forRegionTypes","getMapInfoForCustomMap","forCustomMaps","assign","GeoMap","this","props","center","zoom","MapContainer","TileLayer","ZoomControl","position","children","Component","renderHeaderCell","TableCell","align","width","style","fontWeight","TableCellNumber","humanizedValue","number","humanizedPercent","percent","backgroundColor","color","opacity","styleText","borderRadius","padding","fontSize","DataTable","activeTableIndex","activeMapColorTableName","filteredTableIndex","finalTableIndex","mergeAndExpandOtherOnTable","title","split","splice","join","groupToRegions","invertDict","groupTableIndex","groupRow","Box","Typography","variant","component","TableContainer","sx","top","bottom","Table","stickyHeader","TableHead","TableRow","TableBody","iRow","dataRow","GroupInfoView","region","pop","PCorrectStats","popList","pCorrect","meanPop","limitLower","limitUpper","nCorrectSizeRegions","nRegions","display","MapPropertiesView","popTableIndex","tableIndexIndex","groupInfoList","parseInt","regionMin","regionMax","groupInfo","stdevPop","stdev","Paper","TAB","MAP_PROPS","DATA","DEFAULT_TAB","MainPanel","state","activeTab","event","newActiveTab","setState","right","zIndex","TabContext","borderBottom","borderColor","TabList","onChange","onTabChange","bind","tab","Tab","label","TabPanel","isPointInPolygon","point","polygon","y","nIntersects","i","j","xi","yi","xj","yj","isPointInMultiMultiPolygon","multiMultiPolygon","multiPolygon","GeoData","getCoordinatesForRegion","geoDataList","regionToGeo","iRegion","getRegionTree","regionTree","regionMap","iRegionType","isFoundRegion","isPointInRegion","RegionView","geoJSON","onClickRegion","GeoJSON","data","onEachFeature","feature","layer","on","click","e","originalEvent","altKey","GroupRegionView","mergedGeoJSON","isComponentMounted","type","coordinates","topoJSON","topojsonServer","topojsonClient","objects","funcGetRegionStyle","MultiRegionView","iGroup","COLOR_INFO_LIST","concat","electionYear","Icon","BallotIcon","PeopleAltIcon","ColorPanel","onClickMapColor","left","height","overflow","List","dense","subheader","ListSubheader","selected","ListItemButton","onClick","ListItemIcon","ListItemText","primary","MapPanel","activeMapID","onClickMap","mapInfoIndex","DEFAULT_LATLNG","DEFAULT_MAP_ID","TABLE_NAMES","d","DEFAULT_TABLE_NAME","BORDER_COLOR","getTableIndexIndex","getTableIndex","HomePage","activeGroupID","updateMap","getMapInfoIndex","getChildType","getChildIDs","childRegionIDs","regionGroup","childRegionID","expandRegion","regionRow","fillColor","fillOpacity","weight","getTableRowColor","onClickGroup","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12fc42ef.chunk.js","sourcesContent":["import { MathX } from \"@nuuuwan/utils-js-dev\";\n\nexport class DataStructures {\n  static async buildIndex(keyIDs, asyncFuncKeyToData) {\n    const dataList = await Promise.all(\n      keyIDs.map(async function (keyID) {\n        return await asyncFuncKeyToData(keyID);\n      })\n    );\n\n    return keyIDs.reduce(function (index, keyID, iKey) {\n      index[keyID] = dataList[iKey];\n      return index;\n    }, {});\n  }\n\n  static invertDict(keyToValue) {\n    return Object.entries(keyToValue).reduce(function (\n      valueToKeys,\n      [key, value]\n    ) {\n      if (value) {\n        if (!valueToKeys[value]) {\n          valueToKeys[value] = [];\n        }\n        valueToKeys[value].push(key);\n      }\n      return valueToKeys;\n    },\n    {});\n  }\n}\n\nconst DEFAULT_PRECISION = 3;\n\nexport class Humanize {\n  static number(x) {\n    if (x > 1_000_000) {\n      return (x / 1_000_000).toPrecision(DEFAULT_PRECISION) + \"M\";\n    }\n    if (x > 1_000) {\n      return (x / 1_000).toPrecision(DEFAULT_PRECISION) + \"K\";\n    }\n    return x;\n  }\n\n  static percent(x, xSum) {\n    if (!xSum) {\n      return \"-\";\n    }\n    const p = x / xSum;\n    if (p < 0.01) {\n      return \"<1%\";\n    }\n    return (p * 100.0).toPrecision(DEFAULT_PRECISION) + \"%\";\n  }\n}\n\nexport class StatX {\n  static mean(xList) {\n    const n = xList.length;\n    return MathX.sum(xList) / n;\n  }\n\n  static variance(xList) {\n    const n = xList.length;\n    const eX2 = MathX.sum(xList.map((x) => x * x)) / n;\n    const mean = StatX.mean(xList);\n    return eX2 - mean;\n  }\n\n  static stdev(xList) {\n    return Math.sqrt(StatX.variance(xList));\n  }\n}\n","export const COLOR_ACTIVE = \"red\";\nexport const COLOR_NOT_ACTIVE = \"white\";\n\nexport const COLOR_SL_FLAG = {\n  SINHALA: \"hsl(355, 63%, 34%)\",\n  TAMIL: \"hsl(21, 100%, 50%)\",\n  MOOR: \"hsl(165, 100%, 17%)\",\n  BUDDHIST: \"hsl(43, 100%, 50%)\",\n};\nexport const FIELD_NAME_TO_COLOR = {\n  // political parties\n  SLFP: \"blue\",\n  PA: \"blue\",\n  UPFA: \"blue\",\n  SLPP: COLOR_SL_FLAG.SINHALA,\n  UNP: \"green\",\n  NDF: \"green\",\n  JVP: \"red\",\n  LSSP: \"red\",\n  ACTC: COLOR_SL_FLAG.TAMIL,\n  SLMP: \"purple\",\n\n  other: \"ghostwhite\",\n  others: \"gray\",\n  // ethnicity_of_population\n  bharatha: \"cyan\",\n  burgher: \"purple\",\n  chetty: \"blue\",\n  indian_tamil: COLOR_SL_FLAG.TAMIL,\n  tamil: COLOR_SL_FLAG.TAMIL,\n  malay: COLOR_SL_FLAG.MOOR,\n  moor: COLOR_SL_FLAG.MOOR,\n  muslim: COLOR_SL_FLAG.MOOR,\n  sinhalese: COLOR_SL_FLAG.SINHALA,\n  sri_lankan_tamil: COLOR_SL_FLAG.TAMIL,\n  // religious_affiliation_of_population\n  buddhist: COLOR_SL_FLAG.BUDDHIST,\n  islam: COLOR_SL_FLAG.MOOR,\n  hindu: COLOR_SL_FLAG.TAMIL,\n  roman_catholic: \"purple\",\n  other_christian: \"blue\",\n  christian: \"purple\",\n  // gender_of_population\n  female: \"pink\",\n  male: \"lightblue\",\n  // age_group_of_population\n  // relationship_to_household_head_of_population\n  son_or_daughter: \"green\",\n  head: \"blue\",\n  wife_or_husband: \"pink\",\n  grandchild_or_great_grand_child: \"darkgreen\",\n  other_relative: \"yellow\",\n  non_relative: \"silver\",\n  son_or_daughter_in_law: \"lightgreen\",\n  parent_of_head_or_spouse: \"red\",\n  boarder: \"gray\",\n  domestic_employee: \"brown\",\n  clergy: \"yellow\", //\n  // communication_items_owned_by_household\n  tv: \"green\",\n  mobile: \"purple\",\n  radio: \"maroon\",\n  fixed_tp: \"blue\",\n  pc: \"red\",\n  laptop: \"pink\",\n  fax: \"silver\",\n  // cooking_fuel_of_household\n  fire_wood: \"brown\",\n  gas: \"orange\",\n  kerosene: \"purple\",\n  electricity: \"blue\",\n  // roof_type_in_housing_unit\n\n  // rooms_in_housing_unit\n  // floor_type_in_housing_unit\n  asbestos: \"gray\",\n  tile: \"darkred\",\n  metal_sheet: \"silver\",\n  concrete: \"green\",\n  zink_aluminium_sheet: \"blue\",\n  cement: \"lightgray\",\n  tile_or_granite_or_terrazo: \"orange\",\n  mud: \"darkbrown\",\n  wood: \"brown\",\n  // solid_waste_disposal_by_household\n  occupants_burn: \"red\",\n  occupants_bury: \"orange\",\n  collected_by_local_authorities: \"blue\",\n  occupants_composting_solid_waste: \"green\",\n  // source_of_drinking_water_of_household\n  tap_within_unit_main_line: \"darkgreen\",\n  tap_within_premises_but_outside_unit_main_line: \"green\",\n  tap_outside_premises_main_line: \"orange\",\n  protected_well_within_premises: \"blue\",\n  protected_well_outside_premises: \"lightblue\",\n  unprotected_well: \"purple\",\n  tube_well: \"cyan\",\n  rural_water_projects: \"pink\",\n  river_or_tank_or_stream: \"red\", //\n  bottled_water: \"silver\",\n  // structure_of_housing_units\n  single_house_single_floor: \"darkgreen\",\n  single_house_double_floor: \"green\",\n  single_house_more_than_2_floors: \"lightgreen\",\n  row_house_or_line_room: \"orange\",\n  attached_house_or_annex: \"silver\",\n  twin_house: \"cyan\",\n  flat: \"blue\",\n  condominium: \"purple\",\n  hut_or_shanty: \"red\",\n\n  // housing_ownership_status_of_household\n  owned_by_a_household_member: \"green\",\n  rent_or_lease_privately_owned: \"blue\",\n  rent_or_lease_government_owned: \"cyan\",\n  occupied_free_of_rent: \"orange\",\n  encroached: \"red\",\n  // toilet_facilities_of_household\n  water_seal_and_connected_to_a_piped_sewer_system: \"green\",\n  water_seal_and_connected_to_a_septic_tank: \"lightgreen\",\n  pour_flush_toilet_not_water_seal: \"orange\",\n  direct_pit: \"red\",\n  not_using_a_toilet: \"black\",\n  // lighting_of_household\n  electricity_national_electricity_network: \"blue\",\n  solar_power: \"yellow\",\n  bio_gas: \"orange\",\n  // living_quarters\n  housing_unit: \"green\",\n  collective_living_quarter: \"orange\",\n  non_housing_unit: \"red\",\n  // type_of_housing_unit\n  semi_permanent: \"orange\",\n  permanent: \"green\",\n  improvised: \"red\",\n  unclassified: \"black\",\n  // marital_status_of_population\n  married_registered: \"blue\",\n  never_married: \"green\",\n  widowed: \"orange\",\n  married_customary: \"lightblue\",\n  separated_not_legally: \"pink\",\n  divorced: \"red\",\n  legally_separated: \"maroon\",\n  // wall_type_in_housing_units\n  cement_block_or_stone: \"darkgray\",\n  brick: \"maroon\",\n  cabook: \"orange\",\n  soil_bricks: \"green\",\n  plank_or_metal_sheet: \"silver\",\n  // occupation_status_of_housing_units\n  cadjan_or_palmyrah: \"orange\",\n  occupied: \"green\",\n  vacant: \"red\",\n  // year_of_construction_of_housing_unit\n  // persons_living_in_housing_unit\n};\n","export const APP_NAME = \"lk_regions\";\n","import { MathX, Color, WWW } from \"@nuuuwan/utils-js-dev\";\nimport { FIELD_NAME_TO_COLOR } from \"../constants/ColorConstants.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\nlet adhocValueKeyToColor = {};\n\nconst ID_FIELD_KEY = \"entity_id\";\nconst OTHER_LIMIT = 0.01;\nconst KEY_OTHER = \"other\";\nconst MERGE_ALIAS_MAP = {\n  moor: \"muslim\",\n  malay: \"muslim\",\n  sri_lankan_tamil: \"tamil\",\n  indian_tamil: \"tamil\",\n  roman_catholic: \"christian\",\n  other_christian: \"christian\",\n};\n\nexport default class GIG2 {\n  static async getTable(tableName) {\n    const url = `/${APP_NAME}/data/gig2/${tableName}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getTableIndex(tableName) {\n    const table = await GIG2.getTable(tableName);\n    const valueKeys = GIG2.getValueKeys(table[0]);\n    return table.reduce(function (tableIndex, tableRow) {\n      tableIndex[tableRow[ID_FIELD_KEY]] = Object.entries(tableRow).reduce(\n        function (cleanTableRow, [key, value]) {\n          if (valueKeys.includes(key)) {\n            value = parseFloat(value);\n          }\n          cleanTableRow[key] = value;\n          return cleanTableRow;\n        },\n        {}\n      );\n      return tableIndex;\n    }, {});\n  }\n\n  static getValueKeys(tableRow) {\n    const valueCellKeys = Object.keys(tableRow).filter(\n      (cellKey) =>\n        !(\n          cellKey.includes(\"total_\") ||\n          cellKey.includes(\"_id\") ||\n          cellKey.includes(\"result_ut\") ||\n          cellKey.includes(\"valid\") ||\n          cellKey.includes(\"rejected\") ||\n          cellKey.includes(\"polled\") ||\n          cellKey.includes(\"electors\")\n        )\n    );\n    return valueCellKeys;\n  }\n\n  static getMaxValueKey(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    const maxValueKey = valueKeys.reduce(function (maxValueKey, valueKey) {\n      if (tableRow[maxValueKey] < tableRow[valueKey]) {\n        maxValueKey = valueKey;\n      }\n      return maxValueKey;\n    }, valueKeys[0]);\n    return maxValueKey;\n  }\n\n  static getMinMaxValueP(dataList, valueKey) {\n    return dataList.reduce(\n      function ([minValueP, maxValueP], tableRow) {\n        const sumValue = GIG2.getSumValues(tableRow);\n        const value = tableRow[valueKey];\n        const valueP = value / sumValue;\n        return [Math.min(minValueP, valueP), Math.max(maxValueP, valueP)];\n      },\n      [1.0, 0.0]\n    );\n  }\n\n  static getSumValues(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    return MathX.sum(valueKeys.map((valueKey) => tableRow[valueKey]));\n  }\n\n  static getValueKeyP(tableRow, valueKey) {\n    const sumValues = GIG2.getSumValues(tableRow);\n    return tableRow[valueKey] / sumValues;\n  }\n\n  static getValueKeyColor(valueKey) {\n    if (FIELD_NAME_TO_COLOR[valueKey]) {\n      return FIELD_NAME_TO_COLOR[valueKey];\n    }\n    if (!adhocValueKeyToColor[valueKey]) {\n      adhocValueKeyToColor[valueKey] = Color.getRandomHSLA();\n    }\n    return adhocValueKeyToColor[valueKey];\n  }\n\n  static getTableRowColor(tableRow) {\n    const maxValueKey = GIG2.getMaxValueKey(tableRow);\n    return GIG2.getValueKeyColor(maxValueKey);\n  }\n\n  static getValuePToRankP(dataList, valueKey) {\n    const sortedValuePs = dataList\n      .map((tableRow) => GIG2.getValueKeyP(tableRow, valueKey))\n      .sort();\n    const nValues = sortedValuePs.length;\n    return sortedValuePs.reduce(function (valuePToRankP, valueP, iValue) {\n      valuePToRankP[valueP] = iValue / nValues;\n      return valuePToRankP;\n    }, {});\n  }\n\n  static getFirstRow(tableIndex) {\n    return Object.values(tableIndex)[0];\n  }\n\n  static getTotalRow(tableIndex) {\n    const firstRow = GIG2.getFirstRow(tableIndex);\n    const valueKeys = GIG2.getValueKeys(firstRow);\n    return valueKeys.reduce(function (totalRow, key) {\n      totalRow[key] = MathX.sum(\n        Object.values(tableIndex).map((tableRow) => tableRow[key])\n      );\n      return totalRow;\n    }, {});\n  }\n\n  static getValueSum(tableRow) {\n    const valueKeys = GIG2.getValueKeys(tableRow);\n    return MathX.sum(valueKeys.map((valueKey) => tableRow[valueKey]));\n  }\n\n  static expandOtherOnTableRow(tableRow, sortedNonOtherKeys, otherValueKeys) {\n    let expandedTableRow = sortedNonOtherKeys.reduce(function (\n      expandedTableRow,\n      nonOtherKey\n    ) {\n      expandedTableRow[nonOtherKey] = tableRow[nonOtherKey];\n      return expandedTableRow;\n    },\n    {});\n\n    const otherValueSum = MathX.sum(\n      otherValueKeys.map((valueKey) => tableRow[valueKey])\n    );\n    expandedTableRow[KEY_OTHER] = otherValueSum;\n\n    return expandedTableRow;\n  }\n\n  static mergeKeysOnTableRow(tableRow) {\n    return Object.entries(tableRow).reduce(function (\n      mergedTableRow,\n      [key, value]\n    ) {\n      const mergedKey = MERGE_ALIAS_MAP[key] ? MERGE_ALIAS_MAP[key] : key;\n      if (!mergedTableRow[mergedKey]) {\n        mergedTableRow[mergedKey] = 0;\n      }\n      mergedTableRow[mergedKey] += value;\n      return mergedTableRow;\n    },\n    {});\n  }\n\n  static mergeKeysOnTable(tableIndex) {\n    return Object.entries(tableIndex).reduce(function (\n      mergedTableIndex,\n      [regionID, tableRow]\n    ) {\n      mergedTableIndex[regionID] = GIG2.mergeKeysOnTableRow(tableRow);\n      return mergedTableIndex;\n    },\n    {});\n  }\n\n  static mergeAndExpandOtherOnTable(tableIndex) {\n    const mergedTableIndex = GIG2.mergeKeysOnTable(tableIndex);\n\n    const totalRow = GIG2.getTotalRow(mergedTableIndex);\n    const valueKeys = GIG2.getValueKeys(totalRow);\n    const valueSum = GIG2.getValueSum(totalRow);\n\n    const [otherValueKeys, nonOtherValueKeys] = valueKeys.reduce(\n      function ([otherValueKeys, nonOtherValueKeys], valueKey) {\n        if (valueKey === KEY_OTHER) {\n          otherValueKeys.push(valueKey);\n        }\n        if (totalRow[valueKey] / valueSum < OTHER_LIMIT) {\n          otherValueKeys.push(valueKey);\n        } else {\n          nonOtherValueKeys.push(valueKey);\n        }\n        return [otherValueKeys, nonOtherValueKeys];\n      },\n      [[], []]\n    );\n\n    const sortedNonOtherKeys = nonOtherValueKeys\n      .map(function (key) {\n        return { key, value: totalRow[key] };\n      })\n      .sort((a, b) => b.value - a.value)\n      .map((x) => x.key);\n\n    const expandedTableIndex = Object.entries(mergedTableIndex).reduce(\n      function (expandedTableIndex, [regionID, tableRow]) {\n        expandedTableIndex[regionID] = GIG2.expandOtherOnTableRow(\n          tableRow,\n          sortedNonOtherKeys,\n          otherValueKeys\n        );\n        return expandedTableIndex;\n      },\n      {}\n    );\n    return expandedTableIndex;\n  }\n}\n","import { WWW, StringX } from \"@nuuuwan/utils-js-dev\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const REGION_ID_LK = \"LK\";\nexport const ENT = {\n  COUNTRY: \"country\",\n  PROVINCE: \"province\",\n  DISTRICT: \"district\",\n  DSD: \"dsd\",\n  GND: \"gnd\",\n  PD: \"pd\",\n  ED: \"ed\",\n  MOH: \"moh\",\n  LG: \"lg\",\n  UNKNOWN: \"unknown-entity\",\n};\n\nexport const REGION_TYPES = Object.values(ENT);\n\nexport const ENT_TYPE_TO_LONG_NAME = {\n  [ENT.Country]: \"Country\",\n  [ENT.PROVINCE]: \"Province\",\n  [ENT.DISTRICT]: \"District\",\n  [ENT.DSD]: \"Divisional Secretariat Division\",\n  [ENT.GND]: \"Grama Niladhari Division\",\n  [ENT.PD]: \"Polling Division\",\n  [ENT.ED]: \"Electoral District\",\n  [ENT.MOH]: \"Medical Officer of Health Area\",\n  [ENT.LG]: \"Local Authority Area\",\n};\n\nexport const PARENT_TO_CHILD = {\n  [ENT.COUNTRY]: ENT.PROVINCE,\n  [ENT.PROVINCE]: ENT.DISTRICT,\n  [ENT.DISTRICT]: ENT.DSD,\n  [ENT.DSD]: ENT.GND,\n  [ENT.GND]: undefined,\n  [ENT.PD]: undefined,\n  [ENT.ED]: [ENT.PD],\n};\n\nexport default class Ents {\n  static getEntType(entID) {\n    if (entID.substring(0, 2) === \"LK\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 2:\n          return ENT.COUNTRY;\n        case 4:\n          return ENT.PROVINCE;\n        case 5:\n          return ENT.DISTRICT;\n        case 7:\n          return ENT.DSD;\n        case 10:\n          return ENT.GND;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n    if (entID.substring(0, 2) === \"EC\") {\n      const entIDLength = entID.length;\n      switch (entIDLength) {\n        case 5:\n          return ENT.ED;\n        case 6:\n          return ENT.PD;\n        default:\n          return ENT.UNKNOWN;\n      }\n    }\n\n    if (entID.substring(0, 2) === \"LG\") {\n      return ENT.LG;\n    }\n\n    if (entID.substring(0, 3) === \"MOH\") {\n      return ENT.MOH;\n    }\n    return ENT.UNKNOWN;\n  }\n  static getRegionName(regionType) {\n    return ENT_TYPE_TO_LONG_NAME[regionType];\n  }\n  static async getEntsByType(entType) {\n    const url = `/${APP_NAME}/data/ents/${entType}.tsv`;\n    return await WWW.tsv(url);\n  }\n\n  static async getEntIndexByType(entType) {\n    const ents = await Ents.getEntsByType(entType);\n    return ents.reduce(function (entIndex, ent) {\n      entIndex[ent.id] = ent;\n      return entIndex;\n    }, {});\n  }\n\n  static async getAllEntIndex() {\n    const entTypes = REGION_TYPES;\n    const entIndexList = await Promise.all(\n      entTypes.map(async function (entType) {\n        return await Ents.getEntIndexByType(entType);\n      })\n    );\n\n    return entTypes.reduce(function (allEntIndex, entType, iEnt) {\n      allEntIndex[entType] = entIndexList[iEnt];\n      return allEntIndex;\n    }, {});\n  }\n\n  static async getEnt(entID) {\n    const entType = Ents.getEntType(entID);\n    const entIndex = await Ents.getEntIndexByType(entType);\n    let ent = entIndex[entID];\n    if (!ent) {\n      return null;\n    }\n    if (ent[\"centroid\"]) {\n      ent[\"centroid\"] = JSON.parse(ent[\"centroid\"]);\n    }\n    return ent;\n  }\n\n  static async getParentToChildMap() {\n    const url = `data/ents/parent_to_child_map.json`;\n    return await WWW.json(url);\n  }\n\n  static getChildType(parentType) {\n    return PARENT_TO_CHILD[parentType];\n  }\n\n  static async getChildIDs(parentID, childRegionType) {\n    const ents = await Ents.getEntsByType(childRegionType);\n    return ents\n      .map((ent) => ent.id)\n      .filter((entID) => entID.includes(parentID) || parentID === \"LK\");\n  }\n\n  static getEntTypeLongName(entType) {\n    return ENT_TYPE_TO_LONG_NAME[entType]\n      ? ENT_TYPE_TO_LONG_NAME[entType]\n      : StringX.toTitleCase(entType);\n  }\n}\n","import { WWW } from \"@nuuuwan/utils-js-dev\";\n\nimport { APP_NAME } from \"../constants/Constants.js\";\nimport Ents, { ENT } from \"./Ents.js\";\nimport { DataStructures } from \"./BaseUtils.js\";\n\nexport default class RegionGroup {\n  static async getMapInfoForCustomMap(mapName) {\n    const url = `/${APP_NAME}/data/custom_maps/${mapName}.json`;\n    const rawInfo = await WWW.json(url);\n\n    const groupNameToRegionIDs = rawInfo[\"label_to_region_ids\"];\n    const groupIndex = Object.keys(groupNameToRegionIDs).reduce(function (\n      groupIndex,\n      groupID\n    ) {\n      groupIndex[groupID] = {\n        groupID: groupID,\n        name: groupID,\n      };\n      return groupIndex;\n    },\n    {});\n\n    const regionToGroup = Object.entries(groupNameToRegionIDs).reduce(function (\n      regionToGroup,\n      [groupID, regionIDs]\n    ) {\n      return regionIDs.reduce(function (regionToGroup, regionID) {\n        regionToGroup[regionID] = groupID;\n        return regionToGroup;\n      }, regionToGroup);\n    },\n    {});\n\n    return {\n      mapID: \"custom_\" + mapName,\n      name: mapName,\n      groupIndex,\n      regionToGroup,\n    };\n  }\n\n  static async getMapInfoForRegionType(regionType) {\n    const regionEnts = await Ents.getEntsByType(regionType);\n\n    const groupList = regionEnts.map(function (regionEnt) {\n      return {\n        groupID: regionEnt.id,\n        name: regionEnt.name,\n      };\n    });\n\n    const groupIndex = groupList.reduce(function (groupIndex, group) {\n      groupIndex[group.groupID] = group;\n      return groupIndex;\n    }, {});\n\n    const regionIDs = regionEnts\n      .map((regionEnt) => regionEnt.id)\n      .filter(function (regionID) {\n        return regionType !== ENT.PD || regionID.substring(5) !== \"P\";\n      });\n\n    const regionToGroup = regionIDs.reduce(function (regionToGroup, regionID) {\n      regionToGroup[regionID] = regionID;\n      return regionToGroup;\n    }, {});\n\n    return {\n      mapID: \"region_type_\" + regionType,\n      name: \"By \" + Ents.getEntTypeLongName(regionType),\n      groupIndex,\n      regionToGroup,\n    };\n  }\n\n  static async getMapInfoIndex() {\n    const forRegionTypes = await DataStructures.buildIndex(\n      [ENT.PROVINCE, ENT.DISTRICT, ENT.DSD, ENT.ED, ENT.PD],\n      RegionGroup.getMapInfoForRegionType\n    );\n\n    const forCustomMaps = await DataStructures.buildIndex(\n      [\"sl_new_pds.lk-FINAL.compressed\"],\n      RegionGroup.getMapInfoForCustomMap\n    );\n\n    return Object.assign({}, forRegionTypes, forCustomMaps);\n  }\n}\n","import { Component } from \"react\";\nimport { MapContainer, TileLayer, ZoomControl } from \"react-leaflet\";\n\nimport \"./GeoMap.css\";\n\nconst URL_FORMAT = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\nexport default class GeoMap extends Component {\n  render() {\n    const { center, zoom } = this.props;\n    return (\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer url={URL_FORMAT} />\n        <ZoomControl zoom={zoom} position=\"bottomright\" />\n        {this.props.children}\n      </MapContainer>\n    );\n  }\n}\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { StringX } from \"@nuuuwan/utils-js-dev\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport { Humanize } from \"../../base/BaseUtils.js\";\nimport GIG2 from \"../../base/GIG2.js\";\n\nfunction renderHeaderCell(valueKey) {\n  const style = { fontWeight: 800 };\n  return (\n    <TableCell\n      key={\"header-\" + valueKey}\n      align=\"right\"\n      width=\"30\"\n      style={style}\n    >\n      {StringX.toTitleCase(valueKey)}\n    </TableCell>\n  );\n}\n\nfunction TableCellNumber(props) {\n  const { value, valueSum, valueKey } = props;\n  const humanizedValue = Humanize.number(value);\n  const humanizedPercent = Humanize.percent(value, valueSum);\n  const p = value / valueSum;\n\n  let backgroundColor = \"white\";\n  let color = \"black\";\n  if (p > 0.5) {\n    backgroundColor = GIG2.getValueKeyColor(valueKey);\n    color = \"white\";\n  }\n\n  let opacity = 0.2;\n  if (p > 0.5) {\n    opacity = p;\n  } else if (p > 0.1) {\n    opacity = 0.5;\n  } else if (p > 0.01) {\n    opacity = 0.4;\n  }\n\n  const styleText = {\n    backgroundColor,\n    opacity,\n    borderRadius: 3,\n    padding: 3,\n  };\n\n  return (\n    <TableCell align=\"right\">\n      <div style={styleText}>\n        <div style={{ fontSize: 15, color }}>{humanizedPercent}</div>\n        <div style={{ fontSize: 9, color }}>{humanizedValue}</div>\n      </div>\n    </TableCell>\n  );\n}\n\nexport default function DataTable(props) {\n  const { regionToGroup, activeTableIndex, activeMapColorTableName } = props;\n\n  const filteredTableIndex = Object.entries(activeTableIndex).reduce(function (\n    filteredTableIndex,\n    [regionID, tableRow]\n  ) {\n    if (regionToGroup[regionID]) {\n      filteredTableIndex[regionID] = tableRow;\n    }\n    return filteredTableIndex;\n  },\n  {});\n  const finalTableIndex = GIG2.mergeAndExpandOtherOnTable(filteredTableIndex);\n  const valueKeys = GIG2.getValueKeys(GIG2.getFirstRow(finalTableIndex));\n\n  const title = StringX.toTitleCase(\n    activeMapColorTableName.split(\".\").splice(1, 3).join(\" - \")\n  );\n\n  const groupToRegions = DataStructures.invertDict(regionToGroup);\n  const groupTableIndex = Object.entries(groupToRegions).reduce(function (\n    groupTableIndex,\n    [groupID, regionIDs]\n  ) {\n    groupTableIndex[groupID] = regionIDs.reduce(function (groupRow, regionID) {\n      if (!finalTableIndex[regionID]) {\n        return groupRow;\n      }\n      return Object.entries(finalTableIndex[regionID]).reduce(function (\n        groupRow,\n        [key, value]\n      ) {\n        if (valueKeys.includes(key)) {\n          if (!groupRow[key]) {\n            groupRow[key] = value;\n          } else {\n            groupRow[key] += value;\n          }\n        } else {\n          groupRow[key] = value;\n        }\n        return groupRow;\n      },\n      groupRow);\n    }, {});\n    return groupTableIndex;\n  },\n  {});\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle1\" component=\"div\">\n        {title}\n      </Typography>\n      <TableContainer\n        sx={{ position: \"absolute\", top: 100, bottom: 20, width: 560 }}\n      >\n        <Table stickyHeader padding=\"none\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"right\" width=\"5\" />\n              <TableCell align=\"right\" width=\"80\" />\n              {valueKeys.map(renderHeaderCell)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.entries(groupTableIndex).map(function (\n              [groupID, dataRow],\n              iRow\n            ) {\n              const valueSum = GIG2.getValueSum(dataRow);\n              return (\n                <TableRow key={groupID}>\n                  <TableCell>\n                    <Typography variant=\"caption\">{`${iRow + 1}.`}</Typography>\n                  </TableCell>\n                  <TableCell>{groupID}</TableCell>\n                  {valueKeys.map(function (valueKey) {\n                    return (\n                      <TableCellNumber\n                        key={groupID + \"-\" + valueKey}\n                        value={dataRow[valueKey]}\n                        valueSum={valueSum}\n                        valueKey={valueKey}\n                      />\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n","import Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\n\nimport { MathX } from \"@nuuuwan/utils-js-dev\";\n\nimport { DataStructures, Humanize, StatX } from \"../../base/BaseUtils.js\";\n\nconst POP_TABLE_NAME = \"regions.2012_census.ethnicity_of_population\";\nconst POP_FIELD_KEY = \"total_population\";\n\nfunction GroupInfoView(props) {\n  const { region, title } = props;\n  return (\n    <Box key={region.groupID}>\n      <Typography variant=\"h5\">\n        {Humanize.number(region.pop)}\n      </Typography>\n      <Typography variant=\"h7\">\n        {region.groupID}\n      </Typography>\n      <Typography variant=\"caption\">{title}</Typography>\n    </Box>\n  );\n}\n\nfunction PCorrectStats(props) {\n  const { popList, pCorrect } = props;\n\n  const meanPop = StatX.mean(popList);\n  const limitLower = meanPop / (1 + pCorrect);\n  const limitUpper = meanPop * (1 + pCorrect);\n\n  const correctSizeRegions = popList.filter(\n    (pop) => limitLower <= pop && limitUpper >= pop\n  );\n  const nCorrectSizeRegions = correctSizeRegions.length;\n  const nRegions = popList.length;\n\n  return (\n    <>\n      <Box>\n        <Typography variant=\"h5\" display=\"inline\">\n          {Humanize.percent(nCorrectSizeRegions, nRegions)}\n        </Typography>\n        <Typography variant=\"h7\" display=\"inline\">\n          {\" \" + nCorrectSizeRegions}\n        </Typography>\n      </Box>\n      <Typography variant=\"caption\">\n        Regions within {Humanize.percent(pCorrect, 1)} of Mean Population (\n        {Humanize.number(limitLower)} to {Humanize.number(limitUpper)})\n      </Typography>\n    </>\n  );\n}\n\nexport default function MapPropertiesView(props) {\n  const { regionToGroup, tableIndexIndex } = props;\n  const popTableIndex = tableIndexIndex[POP_TABLE_NAME];\n  const groupToRegions = DataStructures.invertDict(regionToGroup);\n\n  const nRegions = Object.keys(groupToRegions).length;\n\n  const groupInfoList = Object.entries(groupToRegions)\n    .map(function ([groupID, regionIDs]) {\n      const pop = MathX.sum(\n        regionIDs.map(function (regionID) {\n          if (popTableIndex[regionID]) {\n            return parseInt(popTableIndex[regionID][POP_FIELD_KEY]);\n          } else {\n            return 0;\n          }\n        })\n      );\n      return {\n        groupID,\n        pop,\n      };\n    })\n    .sort(function (a, b) {\n      return a.pop - b.pop;\n    });\n\n  const regionMin = groupInfoList[0];\n  const regionMax = groupInfoList[nRegions - 1];\n\n  const popList = groupInfoList.map((groupInfo) => groupInfo.pop);\n\n  const meanPop = StatX.mean(popList);\n  const stdevPop = StatX.stdev(popList);\n\n  return (\n    <Box>\n      <Typography variant=\"h5\">{nRegions}</Typography>\n      <Typography variant=\"caption\">Number of Regions</Typography>\n\n      <Paper sx={{ p: 2 }}>\n        <Typography variant=\"h4\">{\"Population Balance\"}</Typography>\n\n        <Box>\n          <Typography variant=\"h5\" display=\"inline\">\n            {Humanize.number(meanPop)}\n          </Typography>\n          <Typography variant=\"h7\" display=\"inline\">\n            {\" ± \" + Humanize.number(stdevPop * 2)}\n          </Typography>\n        </Box>\n        <Typography variant=\"caption\">\n          Mean Population ± 3 Standard Deviations\n        </Typography>\n\n        <GroupInfoView title=\"Smallest Region\" region={regionMin} />\n        <GroupInfoView title=\"Largest Region\" region={regionMax} />\n\n        <Box>\n          <Typography variant=\"h5\" display=\"inline\">\n            {(regionMax.pop / regionMin.pop).toPrecision(2) + \" : 1\"}\n          </Typography>\n        </Box>\n        <Typography variant=\"caption\">Largest : Smallest</Typography>\n\n        <PCorrectStats popList={popList} pCorrect={0.1} />\n        <PCorrectStats popList={popList} pCorrect={0.2} />\n        <PCorrectStats popList={popList} pCorrect={0.4} />\n      </Paper>\n    </Box>\n  );\n}\n","import { Component } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Tab from \"@mui/material/Tab\";\nimport TabContext from \"@mui/lab/TabContext\";\nimport TabList from \"@mui/lab/TabList\";\nimport TabPanel from \"@mui/lab/TabPanel\";\n\n// import PartitionsTabContent from \"../../nonstate/molecules/PartitionsTabContent.js\";\nimport DataTable from \"../../nonstate/molecules/DataTable.js\";\nimport MapPropertiesView from \"../../nonstate/molecules/MapPropertiesView.js\";\n\nconst TAB = {\n  MAP_PROPS: \"Map Properties\",\n  DATA: \"Data\",\n  // REGIONS: \"Regions\",\n};\nconst DEFAULT_TAB = TAB.MAP_PROPS;\n\nexport default class MainPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { activeTab: DEFAULT_TAB };\n  }\n\n  onTabChange(event, newActiveTab) {\n    this.setState({ activeTab: newActiveTab });\n  }\n\n  render() {\n    const {\n      // groupIndex,\n      regionToGroup,\n      // onClickGroup,\n      // activeGroupID,\n      activeTableIndex,\n      activeMapColorTableName,\n      tableIndexIndex,\n    } = this.props;\n    const { activeTab } = this.state;\n\n    return (\n      <Paper\n        sx={{\n          position: \"absolute\",\n          top: 20,\n          right: 20,\n          bottom: 20,\n          width: 600,\n          zIndex: 1000,\n        }}\n      >\n        <TabContext value={activeTab}>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <TabList\n              onChange={this.onTabChange.bind(this)}\n              aria-label=\"lab API tabs example\"\n            >\n              {Object.values(TAB).map(function (tab) {\n                return <Tab key={tab} label={tab} value={tab} />;\n              })}\n            </TabList>\n          </Box>\n\n          <TabPanel value={TAB.MAP_PROPS}>\n            <MapPropertiesView\n              regionToGroup={regionToGroup}\n              tableIndexIndex={tableIndexIndex}\n            />\n          </TabPanel>\n\n          <TabPanel value={TAB.DATA}>\n            <DataTable\n              regionToGroup={regionToGroup}\n              activeTableIndex={activeTableIndex}\n              activeMapColorTableName={activeMapColorTableName}\n            />\n          </TabPanel>\n        </TabContext>\n      </Paper>\n    );\n  }\n}\n\n// <TabPanel value={TAB.REGIONS}>\n//   <PartitionsTabContent\n//     groupIndex={groupIndex}\n//     regionToGroup={regionToGroup}\n//     onClickGroup={onClickGroup}\n//     activeGroupID={activeGroupID}\n//   />\n// </TabPanel>\n","import { WWW } from \"@nuuuwan/utils-js-dev\";\nimport Ents, { REGION_TYPES } from \"./Ents.js\";\nimport { APP_NAME } from \"../constants/Constants.js\";\n\nexport const DEFAULT_ZOOM = 8;\nexport const DEFAULT_LATLNG = [7.836173, 80.403442];\n\nexport function getDefaultLatLngZoomStr() {\n  return getLatLngZoomStr(DEFAULT_LATLNG, DEFAULT_ZOOM);\n}\n\nexport function getLatLngZoomStr([lat, lng], zoom) {\n  return `${lat}N,${lng}E,${zoom}z`;\n}\n\nexport function parseLatLngZoomStr(locationStr) {\n  const [latStr, lngStr, zoomStr] = locationStr.split(\",\");\n  const lat = parseFloat(latStr.replace(\"N\", \"\"));\n  const lng = parseFloat(lngStr.replace(\"E\", \"\"));\n  const zoom = parseInt(zoomStr.replace(\"z\", \"\"));\n  return { lat, lng, zoom };\n}\n\nexport function getBrowserLatLng(callback) {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      callback([position.coords.latitude, position.coords.longitude]);\n    });\n  } else {\n    callback(DEFAULT_LATLNG);\n  }\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [y, x] = point;\n  let nIntersects = 0;\n  for (let i in polygon) {\n    const j = (i - 1 + polygon.length) % polygon.length;\n\n    const [xi, yi] = polygon[i];\n    const [xj, yj] = polygon[j];\n\n    // eslint-disable-next-line no-mixed-operators\n    const a = yi > y !== yj > y;\n    // eslint-disable-next-line no-mixed-operators\n    const b = x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n    const intersect = a && b;\n    if (intersect) {\n      nIntersects += 1;\n    }\n  }\n  return nIntersects % 2 === 1;\n}\n\nfunction isPointInMultiMultiPolygon(point, multiMultiPolygon) {\n  for (let i in multiMultiPolygon) {\n    const multiPolygon = multiMultiPolygon[i];\n    for (let j in multiPolygon) {\n      const polygon = multiPolygon[j];\n      if (isPointInPolygon(point, polygon)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport default class GeoData {\n  static async getCoordinatesForRegion(regionID) {\n    const regionType = Ents.getEntType(regionID);\n    const url = `/${APP_NAME}/data/geo/${regionType}/${regionID}.json`;\n    return await WWW.json(url);\n  }\n\n  static async getRegionToGeo(regionIDs) {\n    const geoDataList = await Promise.all(\n      regionIDs.map(async function (regionID) {\n        return await GeoData.getCoordinatesForRegion(regionID);\n      })\n    );\n\n    return regionIDs.reduce(function (regionToGeo, regionID, iRegion) {\n      regionToGeo[regionID] = geoDataList[iRegion];\n      return regionToGeo;\n    }, {});\n  }\n\n  static async getRegionTree() {\n    const url = `/${APP_NAME}/data/geo/region_tree.json`;\n    return await WWW.json(url);\n  }\n\n  static async isPointInRegion(point, regionID) {\n    const multiPolygon = await GeoData.getCoordinatesForRegion(regionID);\n    return isPointInMultiMultiPolygon(point, multiPolygon);\n  }\n\n  static async getRegionsForPoint(point) {\n    let regionTree = await GeoData.getRegionTree();\n\n    let regionMap = {};\n\n    for (let iRegionType in REGION_TYPES) {\n      const regionType = REGION_TYPES[iRegionType];\n      const regionIDs = Object.keys(regionTree);\n      let isFoundRegion = false;\n      for (let iRegion in regionIDs) {\n        const regionID = regionIDs[iRegion];\n        const _isPointInRegion = await GeoData.isPointInRegion(point, regionID);\n        if (_isPointInRegion) {\n          regionMap[regionType] = regionID;\n          regionTree = regionTree[regionID];\n          isFoundRegion = true;\n        }\n      }\n      if (!isFoundRegion) {\n        break;\n      }\n    }\n    return regionMap;\n  }\n}\n\nexport function roundLatLng(latLng) {\n  const Q = 1000_000;\n  return latLng.map((x) => Math.round(parseFloat(x) * Q) / Q);\n}\n","import { Component } from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\n\nexport default class RegionView extends Component {\n  render() {\n    const { geoJSON, style, onClickRegion } = this.props;\n    const onEachFeature = (feature, layer) => {\n      layer.on({\n        click: function (e) {\n          onClickRegion(null, e.originalEvent.altKey);\n        },\n      });\n    };\n\n    return (\n      <GeoJSON data={geoJSON} style={style} onEachFeature={onEachFeature} />\n    );\n  }\n}\n","import { Component } from \"react\";\n\nimport * as topojsonClient from \"topojson-client\";\nimport * as topojsonServer from \"topojson-server\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport GeoData from \"../../base/GeoData.js\";\nimport RegionView from \"../atoms/RegionView.js\";\n\nclass GroupRegionView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { mergedGeoJSON: null };\n    this.isComponentMounted = false;\n  }\n\n  async componentDidMount() {\n    this.isComponentMounted = true;\n    const { regionIDs } = this.props;\n\n    const geoJSON = await Promise.all(\n      regionIDs.map(async function (regionID) {\n        return {\n          type: \"MultiPolygon\",\n          coordinates: await GeoData.getCoordinatesForRegion(regionID),\n        };\n      })\n    );\n\n    const topoJSON = topojsonServer.topology(geoJSON);\n    const mergedGeoJSON = topojsonClient.merge(\n      topoJSON,\n      Object.values(topoJSON.objects)\n    );\n\n    if (this.isComponentMounted) {\n      this.setState({ mergedGeoJSON });\n    }\n  }\n\n  render() {\n    const { mergedGeoJSON } = this.state;\n    if (!mergedGeoJSON) {\n      return null;\n    }\n    const { regionIDs, onClickRegion, funcGetRegionStyle } = this.props;\n\n    return (\n      <RegionView\n        geoJSON={mergedGeoJSON}\n        onClickRegion={onClickRegion}\n        style={funcGetRegionStyle(regionIDs[0])}\n      />\n    );\n  }\n}\n\nexport default class MultiRegionView extends Component {\n  render() {\n    const { regionToGroup, onClickRegion, funcGetRegionStyle } = this.props;\n\n    const groupToRegions = DataStructures.invertDict(regionToGroup);\n\n    return Object.entries(groupToRegions).map(function (\n      [groupID, regionIDs],\n      iGroup\n    ) {\n      return (\n        <GroupRegionView\n          key={`group-${groupID}`}\n          regionIDs={regionIDs}\n          onClickRegion={onClickRegion}\n          funcGetRegionStyle={funcGetRegionStyle}\n        />\n      );\n    });\n  }\n}\n","import Paper from \"@mui/material/Paper\";\n\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport List from \"@mui/material/List\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport BallotIcon from \"@mui/icons-material/Ballot\";\n\nconst PRESIDENTIAL_ELECTION_YEAR_LIST = [\n  2019, 2015, 2010, 2005, 1999, 1994, 1988, 1982,\n];\n\nexport const COLOR_INFO_LIST = [].concat(\n  // Presidential Elections\n  PRESIDENTIAL_ELECTION_YEAR_LIST.map(function (electionYear) {\n    return {\n      label: `${electionYear} Presidential Election`,\n      tableName: `regions_ec.${electionYear}_election_presidential.result`,\n      Icon: BallotIcon,\n    };\n  }),\n  // 2012 Census\n  [\n    {\n      label: \"Ethnicity\",\n      tableName: \"regions.2012_census.ethnicity_of_population\",\n      Icon: PeopleAltIcon,\n    },\n    {\n      label: \"Religion\",\n      tableName: \"regions.2012_census.religious_affiliation_of_population\",\n      Icon: PeopleAltIcon,\n    },\n  ]\n);\n\nexport default function ColorPanel(props) {\n  const { activeMapColorTableName, onClickMapColor } = props;\n\n  function renderListItem({ label, tableName, Icon }) {\n    const selected = activeMapColorTableName === tableName;\n\n    function onClick() {\n      onClickMapColor(tableName);\n    }\n\n    return (\n      <ListItemButton key={label} selected={selected} onClick={onClick}>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText primary={label} />\n      </ListItemButton>\n    );\n  }\n\n  return (\n    <Paper\n      sx={{\n        position: \"absolute\",\n        zIndex: 1000,\n\n        left: 20,\n        bottom: 20,\n\n        width: 300,\n        height: 420,\n        overflow: \"scroll\",\n      }}\n    >\n      <List dense subheader={<ListSubheader>Color Map by</ListSubheader>}>\n        {COLOR_INFO_LIST.map(renderListItem)}\n      </List>\n    </Paper>\n  );\n}\n","import Paper from \"@mui/material/Paper\";\n\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport List from \"@mui/material/List\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport MapIcon from \"@mui/icons-material/Map\";\n\nimport Ents from \"../../base/Ents.js\";\n\nexport default function MapPanel(props) {\n  const { activeMapID, onClickMap, mapInfoIndex } = props;\n\n  function renderListItem(mapID) {\n    const selected = activeMapID === mapID;\n\n    function onClick() {\n      onClickMap(mapID);\n    }\n\n    return (\n      <ListItemButton key={mapID} selected={selected} onClick={onClick}>\n        <ListItemIcon>\n          <MapIcon />\n        </ListItemIcon>\n        <ListItemText primary={Ents.getEntTypeLongName(mapID)} />\n      </ListItemButton>\n    );\n  }\n\n  return (\n    <Paper\n      sx={{\n        position: \"absolute\",\n        zIndex: 1000,\n\n        left: 20,\n        top: 20,\n        width: 200,\n        height: 300,\n      }}\n    >\n      <List dense subheader={<ListSubheader>Split Regions by</ListSubheader>}>\n        {Object.keys(mapInfoIndex).map(renderListItem)}\n      </List>\n    </Paper>\n  );\n}\n","import { Component } from \"react\";\n\nimport { DataStructures } from \"../../base/BaseUtils.js\";\nimport GIG2 from \"../../base/GIG2.js\";\nimport Ents, { ENT } from \"../../base/Ents.js\";\nimport RegionGroup from \"../../base/RegionGroup.js\";\nimport GeoMap from \"../molecules/GeoMap.js\";\nimport MainPanel from \"../molecules/MainPanel.js\";\nimport MultiRegionView from \"../../stateful/molecules/MultiRegionView.js\";\nimport ColorPanel, {\n  COLOR_INFO_LIST,\n} from \"../../nonstate/molecules/ColorPanel.js\";\nimport MapPanel from \"../../nonstate/molecules/MapPanel.js\";\n\nconst DEFAULT_ZOOM = 8;\nconst DEFAULT_LATLNG = [7.9, 81.5];\nconst DEFAULT_MAP_ID = ENT.PROVINCE;\n\nconst TABLE_NAMES = COLOR_INFO_LIST.map((d) => d.tableName);\nconst DEFAULT_TABLE_NAME = TABLE_NAMES[0];\n\nconst BORDER_COLOR = \"white\";\nconst BORDER_WIDTH = 1;\n\nasync function getTableIndexIndex() {\n  return await DataStructures.buildIndex(TABLE_NAMES, GIG2.getTableIndex);\n}\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Data\n      activeMapID: DEFAULT_MAP_ID,\n      mapInfoIndex: undefined,\n\n      groupIndex: undefined,\n      activeGroupID: undefined,\n\n      tableIndexIndex: undefined,\n      activeMapColorTableName: DEFAULT_TABLE_NAME,\n\n    };\n  }\n\n  async componentDidMount() {\n    const { activeMapID } = this.state;\n    await this.updateMap(activeMapID);\n  }\n\n  async updateMap(activeMapID) {\n    let mapInfoIndex = this.state.mapInfoIndex;\n    if (mapInfoIndex === undefined) {\n      mapInfoIndex = await RegionGroup.getMapInfoIndex();\n    }\n\n    const { groupIndex, regionToGroup } = mapInfoIndex[activeMapID];\n    const activeGroupID = Object.keys(groupIndex)[0];\n\n    let tableIndexIndex = this.state.tableIndexIndex;\n    if (tableIndexIndex === undefined) {\n      tableIndexIndex = await getTableIndexIndex();\n    }\n\n    this.setState({\n      mapInfoIndex,\n      groupIndex,\n      regionToGroup,\n      activeGroupID,\n      activeMapID,\n      tableIndexIndex,\n    });\n  }\n\n  async expandRegion(regionID) {\n    // Update regionToGroup\n    let { regionToGroup } = this.state;\n    const regionType = Ents.getEntType(regionID);\n    const childRegionType = Ents.getChildType(regionType);\n\n    if (!childRegionType) {\n      return;\n    }\n\n    const childRegionIDs = await Ents.getChildIDs(regionID, childRegionType);\n    const regionGroup = regionToGroup[regionID];\n    regionToGroup = childRegionIDs.reduce(function (\n      regionToGroup,\n      childRegionID\n    ) {\n      regionToGroup[childRegionID] = regionGroup;\n      return regionToGroup;\n    },\n    regionToGroup);\n    delete regionToGroup[regionID];\n\n    this.setState({ regionToGroup });\n  }\n\n  async onClickRegion(regionID, altKey) {\n    if (altKey) {\n      await this.expandRegion(regionID);\n    } else {\n      let { regionToGroup, activeGroupID } = this.state;\n      regionToGroup[regionID] =\n        regionToGroup[regionID] === activeGroupID ? undefined : activeGroupID;\n      this.setState({ regionToGroup });\n    }\n  }\n\n  onClickGroup(groupID) {\n    this.setState({ activeGroupID: groupID });\n  }\n\n  onClickMapColor(activeMapColorTableName) {\n    this.setState({ activeMapColorTableName });\n  }\n  async onClickMap(activeMapID) {\n    await this.updateMap(activeMapID);\n  }\n\n  render() {\n    const {\n      groupIndex,\n      regionToGroup,\n      activeGroupID,\n      mapInfoIndex,\n      tableIndexIndex,\n      activeMapColorTableName,\n      activeMapID,\n    } = this.state;\n\n    if (!groupIndex) {\n      return \"...\";\n    }\n\n    const activeTableIndex = tableIndexIndex[activeMapColorTableName];\n\n    function funcGetRegionStyle(regionID) {\n      const regionRow = activeTableIndex[regionID];\n      let opacity = 0.1;\n      let color = \"gray\";\n\n      if (!regionRow) {\n        return {\n          fillColor: color,\n          fillOpacity: opacity,\n          color: BORDER_COLOR,\n          weight: BORDER_WIDTH,\n        };\n      }\n\n      const maxValueKey = GIG2.getMaxValueKey(regionRow);\n      const maxValueP = GIG2.getValueKeyP(regionRow, maxValueKey);\n\n      if (maxValueP > 0.5) {\n        opacity = Math.max(0, maxValueP - 0.5) + 0.5;\n        color = GIG2.getTableRowColor(regionRow);\n      } else {\n        opacity = 0.75;\n        color = \"gray\";\n      }\n\n      return {\n        fillColor: color,\n        fillOpacity: opacity,\n        color: BORDER_COLOR,\n        weight: BORDER_WIDTH,\n      };\n    }\n\n    return (\n      <div>\n        <GeoMap center={DEFAULT_LATLNG} zoom={DEFAULT_ZOOM}>\n          <MultiRegionView\n            key={`multi-region-view-${activeMapID}`}\n            regionToGroup={regionToGroup}\n            activeGroupID={activeGroupID}\n            onClickRegion={this.onClickRegion.bind(this)}\n            funcGetRegionStyle={funcGetRegionStyle}\n          />\n        </GeoMap>\n        <MapPanel\n          activeMapID={activeMapID}\n          onClickMap={this.onClickMap.bind(this)}\n          mapInfoIndex={mapInfoIndex}\n        />\n        <ColorPanel\n          activeMapColorTableName={activeMapColorTableName}\n          onClickMapColor={this.onClickMapColor.bind(this)}\n        />\n\n        <MainPanel\n          groupIndex={groupIndex}\n          regionToGroup={regionToGroup}\n          onClickGroup={this.onClickGroup.bind(this)}\n          activeGroupID={activeGroupID}\n          activeTableIndex={activeTableIndex}\n          activeMapColorTableName={activeMapColorTableName}\n          tableIndexIndex={tableIndexIndex}\n        />\n\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport HomePage from \"./stateful/pages/HomePage.js\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}